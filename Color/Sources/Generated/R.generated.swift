//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 21 colors.
  struct color {
    /// Color `Azure`.
    static let azure = Rswift.ColorResource(bundle: R.hostingBundle, name: "Azure")
    /// Color `Brandeis Blue`.
    static let brandeisBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Brandeis Blue")
    /// Color `Cadet`.
    static let cadet = Rswift.ColorResource(bundle: R.hostingBundle, name: "Cadet")
    /// Color `Charcoal Light`.
    static let charcoalLight = Rswift.ColorResource(bundle: R.hostingBundle, name: "Charcoal Light")
    /// Color `Charcoal`.
    static let charcoal = Rswift.ColorResource(bundle: R.hostingBundle, name: "Charcoal")
    /// Color `Charcol Dark`.
    static let charcolDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "Charcol Dark")
    /// Color `Cornflower blue`.
    static let cornflowerBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Cornflower blue")
    /// Color `Dark Gray`.
    static let darkGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "Dark Gray")
    /// Color `Deep chestnut`.
    static let deepChestnut = Rswift.ColorResource(bundle: R.hostingBundle, name: "Deep chestnut")
    /// Color `India Red`.
    static let indiaRed = Rswift.ColorResource(bundle: R.hostingBundle, name: "India Red")
    /// Color `Light gray`.
    static let lightGray = Rswift.ColorResource(bundle: R.hostingBundle, name: "Light gray")
    /// Color `Liver`.
    static let liver = Rswift.ColorResource(bundle: R.hostingBundle, name: "Liver")
    /// Color `Medium Jungle Green Dark`.
    static let mediumJungleGreenDark = Rswift.ColorResource(bundle: R.hostingBundle, name: "Medium Jungle Green Dark")
    /// Color `Medium Jungle Green`.
    static let mediumJungleGreen = Rswift.ColorResource(bundle: R.hostingBundle, name: "Medium Jungle Green")
    /// Color `Medium Orchid`.
    static let mediumOrchid = Rswift.ColorResource(bundle: R.hostingBundle, name: "Medium Orchid")
    /// Color `Medium Slate Blue`.
    static let mediumSlateBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Medium Slate Blue")
    /// Color `Medium electric blue`.
    static let mediumElectricBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Medium electric blue")
    /// Color `Olive Drab`.
    static let oliveDrab = Rswift.ColorResource(bundle: R.hostingBundle, name: "Olive Drab")
    /// Color `Red Brown`.
    static let redBrown = Rswift.ColorResource(bundle: R.hostingBundle, name: "Red Brown")
    /// Color `Trolley Grey`.
    static let trolleyGrey = Rswift.ColorResource(bundle: R.hostingBundle, name: "Trolley Grey")
    /// Color `Yale Blue`.
    static let yaleBlue = Rswift.ColorResource(bundle: R.hostingBundle, name: "Yale Blue")
    
    /// `UIColor(named: "Azure", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func azure(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.azure, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Brandeis Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func brandeisBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.brandeisBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Cadet", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cadet(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cadet, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Charcoal Light", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charcoalLight(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charcoalLight, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Charcoal", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charcoal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charcoal, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Charcol Dark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func charcolDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.charcolDark, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Cornflower blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cornflowerBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cornflowerBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Dark Gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func darkGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.darkGray, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Deep chestnut", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func deepChestnut(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.deepChestnut, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "India Red", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func indiaRed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.indiaRed, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Light gray", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func lightGray(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.lightGray, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Liver", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func liver(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.liver, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Medium Jungle Green Dark", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mediumJungleGreenDark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mediumJungleGreenDark, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Medium Jungle Green", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mediumJungleGreen(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mediumJungleGreen, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Medium Orchid", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mediumOrchid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mediumOrchid, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Medium Slate Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mediumSlateBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mediumSlateBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Medium electric blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func mediumElectricBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.mediumElectricBlue, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Olive Drab", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func oliveDrab(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.oliveDrab, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Red Brown", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func redBrown(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.redBrown, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Trolley Grey", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func trolleyGrey(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.trolleyGrey, compatibleWith: traitCollection)
    }
    
    /// `UIColor(named: "Yale Blue", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func yaleBlue(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.yaleBlue, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 36 files.
  struct file {
    /// Resource file `LICENSE.txt`.
    static let licenseTxt = Rswift.FileResource(bundle: R.hostingBundle, name: "LICENSE", pathExtension: "txt")
    /// Resource file `Montserrat-LICENCE.txt`.
    static let montserratLICENCETxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-LICENCE", pathExtension: "txt")
    /// Resource file `Montserrat-Regular.ttf`.
    static let montserratRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Montserrat-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Black.ttf`.
    static let robotoBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Black", pathExtension: "ttf")
    /// Resource file `Roboto-BlackItalic.ttf`.
    static let robotoBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BlackItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Bold.ttf`.
    static let robotoBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Bold", pathExtension: "ttf")
    /// Resource file `Roboto-BoldItalic.ttf`.
    static let robotoBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-BoldItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Italic.ttf`.
    static let robotoItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Italic", pathExtension: "ttf")
    /// Resource file `Roboto-Light.ttf`.
    static let robotoLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Light", pathExtension: "ttf")
    /// Resource file `Roboto-LightItalic.ttf`.
    static let robotoLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-LightItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Medium.ttf`.
    static let robotoMediumTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Medium", pathExtension: "ttf")
    /// Resource file `Roboto-MediumItalic.ttf`.
    static let robotoMediumItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-MediumItalic", pathExtension: "ttf")
    /// Resource file `Roboto-Regular.ttf`.
    static let robotoRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Regular", pathExtension: "ttf")
    /// Resource file `Roboto-Thin.ttf`.
    static let robotoThinTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-Thin", pathExtension: "ttf")
    /// Resource file `Roboto-ThinItalic.ttf`.
    static let robotoThinItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto-ThinItalic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Bold.ttf`.
    static let robotoCondensedBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Bold", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-BoldItalic.ttf`.
    static let robotoCondensedBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-BoldItalic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Italic.ttf`.
    static let robotoCondensedItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Italic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Light.ttf`.
    static let robotoCondensedLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Light", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-LightItalic.ttf`.
    static let robotoCondensedLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-LightItalic", pathExtension: "ttf")
    /// Resource file `RobotoCondensed-Regular.ttf`.
    static let robotoCondensedRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed-Regular", pathExtension: "ttf")
    /// Resource file `RobotoCondensed_LICENSE.txt`.
    static let robotoCondensed_LICENSETxt = Rswift.FileResource(bundle: R.hostingBundle, name: "RobotoCondensed_LICENSE", pathExtension: "txt")
    /// Resource file `Roboto_LICENSE.txt`.
    static let roboto_LICENSETxt = Rswift.FileResource(bundle: R.hostingBundle, name: "Roboto_LICENSE", pathExtension: "txt")
    /// Resource file `SourceSansPro-Black.ttf`.
    static let sourceSansProBlackTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Black", pathExtension: "ttf")
    /// Resource file `SourceSansPro-BlackItalic.ttf`.
    static let sourceSansProBlackItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-BlackItalic", pathExtension: "ttf")
    /// Resource file `SourceSansPro-Bold.ttf`.
    static let sourceSansProBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Bold", pathExtension: "ttf")
    /// Resource file `SourceSansPro-BoldItalic.ttf`.
    static let sourceSansProBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-BoldItalic", pathExtension: "ttf")
    /// Resource file `SourceSansPro-ExtraLight.ttf`.
    static let sourceSansProExtraLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-ExtraLight", pathExtension: "ttf")
    /// Resource file `SourceSansPro-ExtraLightItalic.ttf`.
    static let sourceSansProExtraLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-ExtraLightItalic", pathExtension: "ttf")
    /// Resource file `SourceSansPro-Italic.ttf`.
    static let sourceSansProItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Italic", pathExtension: "ttf")
    /// Resource file `SourceSansPro-LICENCE.txt`.
    static let sourceSansProLICENCETxt = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-LICENCE", pathExtension: "txt")
    /// Resource file `SourceSansPro-Light.ttf`.
    static let sourceSansProLightTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Light", pathExtension: "ttf")
    /// Resource file `SourceSansPro-LightItalic.ttf`.
    static let sourceSansProLightItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-LightItalic", pathExtension: "ttf")
    /// Resource file `SourceSansPro-Regular.ttf`.
    static let sourceSansProRegularTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-Regular", pathExtension: "ttf")
    /// Resource file `SourceSansPro-SemiBold.ttf`.
    static let sourceSansProSemiBoldTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-SemiBold", pathExtension: "ttf")
    /// Resource file `SourceSansPro-SemiBoldItalic.ttf`.
    static let sourceSansProSemiBoldItalicTtf = Rswift.FileResource(bundle: R.hostingBundle, name: "SourceSansPro-SemiBoldItalic", pathExtension: "ttf")
    
    /// `bundle.url(forResource: "LICENSE", withExtension: "txt")`
    static func licenseTxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.licenseTxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Montserrat-LICENCE", withExtension: "txt")`
    static func montserratLICENCETxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratLICENCETxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Montserrat-Regular", withExtension: "ttf")`
    static func montserratRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.montserratRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Black", withExtension: "ttf")`
    static func robotoBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-BlackItalic", withExtension: "ttf")`
    static func robotoBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Bold", withExtension: "ttf")`
    static func robotoBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-BoldItalic", withExtension: "ttf")`
    static func robotoBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Italic", withExtension: "ttf")`
    static func robotoItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Light", withExtension: "ttf")`
    static func robotoLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-LightItalic", withExtension: "ttf")`
    static func robotoLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Medium", withExtension: "ttf")`
    static func robotoMediumTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-MediumItalic", withExtension: "ttf")`
    static func robotoMediumItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoMediumItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Regular", withExtension: "ttf")`
    static func robotoRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-Thin", withExtension: "ttf")`
    static func robotoThinTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto-ThinItalic", withExtension: "ttf")`
    static func robotoThinItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoThinItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Bold", withExtension: "ttf")`
    static func robotoCondensedBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-BoldItalic", withExtension: "ttf")`
    static func robotoCondensedBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Italic", withExtension: "ttf")`
    static func robotoCondensedItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Light", withExtension: "ttf")`
    static func robotoCondensedLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-LightItalic", withExtension: "ttf")`
    static func robotoCondensedLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed-Regular", withExtension: "ttf")`
    static func robotoCondensedRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensedRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "RobotoCondensed_LICENSE", withExtension: "txt")`
    static func robotoCondensed_LICENSETxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.robotoCondensed_LICENSETxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "Roboto_LICENSE", withExtension: "txt")`
    static func roboto_LICENSETxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.roboto_LICENSETxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-Black", withExtension: "ttf")`
    static func sourceSansProBlackTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProBlackTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-BlackItalic", withExtension: "ttf")`
    static func sourceSansProBlackItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProBlackItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-Bold", withExtension: "ttf")`
    static func sourceSansProBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-BoldItalic", withExtension: "ttf")`
    static func sourceSansProBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-ExtraLight", withExtension: "ttf")`
    static func sourceSansProExtraLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProExtraLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-ExtraLightItalic", withExtension: "ttf")`
    static func sourceSansProExtraLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProExtraLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-Italic", withExtension: "ttf")`
    static func sourceSansProItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-LICENCE", withExtension: "txt")`
    static func sourceSansProLICENCETxt(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProLICENCETxt
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-Light", withExtension: "ttf")`
    static func sourceSansProLightTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProLightTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-LightItalic", withExtension: "ttf")`
    static func sourceSansProLightItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProLightItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-Regular", withExtension: "ttf")`
    static func sourceSansProRegularTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProRegularTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-SemiBold", withExtension: "ttf")`
    static func sourceSansProSemiBoldTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProSemiBoldTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    /// `bundle.url(forResource: "SourceSansPro-SemiBoldItalic", withExtension: "ttf")`
    static func sourceSansProSemiBoldItalicTtf(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.sourceSansProSemiBoldItalicTtf
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 31 fonts.
  struct font: Rswift.Validatable {
    /// Font `Montserrat-Regular`.
    static let montserratRegular = Rswift.FontResource(fontName: "Montserrat-Regular")
    /// Font `Roboto-BlackItalic`.
    static let robotoBlackItalic = Rswift.FontResource(fontName: "Roboto-BlackItalic")
    /// Font `Roboto-Black`.
    static let robotoBlack = Rswift.FontResource(fontName: "Roboto-Black")
    /// Font `Roboto-BoldItalic`.
    static let robotoBoldItalic = Rswift.FontResource(fontName: "Roboto-BoldItalic")
    /// Font `Roboto-Bold`.
    static let robotoBold = Rswift.FontResource(fontName: "Roboto-Bold")
    /// Font `Roboto-Italic`.
    static let robotoItalic = Rswift.FontResource(fontName: "Roboto-Italic")
    /// Font `Roboto-LightItalic`.
    static let robotoLightItalic = Rswift.FontResource(fontName: "Roboto-LightItalic")
    /// Font `Roboto-Light`.
    static let robotoLight = Rswift.FontResource(fontName: "Roboto-Light")
    /// Font `Roboto-MediumItalic`.
    static let robotoMediumItalic = Rswift.FontResource(fontName: "Roboto-MediumItalic")
    /// Font `Roboto-Medium`.
    static let robotoMedium = Rswift.FontResource(fontName: "Roboto-Medium")
    /// Font `Roboto-Regular`.
    static let robotoRegular = Rswift.FontResource(fontName: "Roboto-Regular")
    /// Font `Roboto-ThinItalic`.
    static let robotoThinItalic = Rswift.FontResource(fontName: "Roboto-ThinItalic")
    /// Font `Roboto-Thin`.
    static let robotoThin = Rswift.FontResource(fontName: "Roboto-Thin")
    /// Font `RobotoCondensed-BoldItalic`.
    static let robotoCondensedBoldItalic = Rswift.FontResource(fontName: "RobotoCondensed-BoldItalic")
    /// Font `RobotoCondensed-Bold`.
    static let robotoCondensedBold = Rswift.FontResource(fontName: "RobotoCondensed-Bold")
    /// Font `RobotoCondensed-Italic`.
    static let robotoCondensedItalic = Rswift.FontResource(fontName: "RobotoCondensed-Italic")
    /// Font `RobotoCondensed-LightItalic`.
    static let robotoCondensedLightItalic = Rswift.FontResource(fontName: "RobotoCondensed-LightItalic")
    /// Font `RobotoCondensed-Light`.
    static let robotoCondensedLight = Rswift.FontResource(fontName: "RobotoCondensed-Light")
    /// Font `RobotoCondensed-Regular`.
    static let robotoCondensedRegular = Rswift.FontResource(fontName: "RobotoCondensed-Regular")
    /// Font `SourceSansPro-BlackItalic`.
    static let sourceSansProBlackItalic = Rswift.FontResource(fontName: "SourceSansPro-BlackItalic")
    /// Font `SourceSansPro-Black`.
    static let sourceSansProBlack = Rswift.FontResource(fontName: "SourceSansPro-Black")
    /// Font `SourceSansPro-BoldItalic`.
    static let sourceSansProBoldItalic = Rswift.FontResource(fontName: "SourceSansPro-BoldItalic")
    /// Font `SourceSansPro-Bold`.
    static let sourceSansProBold = Rswift.FontResource(fontName: "SourceSansPro-Bold")
    /// Font `SourceSansPro-ExtraLightItalic`.
    static let sourceSansProExtraLightItalic = Rswift.FontResource(fontName: "SourceSansPro-ExtraLightItalic")
    /// Font `SourceSansPro-ExtraLight`.
    static let sourceSansProExtraLight = Rswift.FontResource(fontName: "SourceSansPro-ExtraLight")
    /// Font `SourceSansPro-Italic`.
    static let sourceSansProItalic = Rswift.FontResource(fontName: "SourceSansPro-Italic")
    /// Font `SourceSansPro-LightItalic`.
    static let sourceSansProLightItalic = Rswift.FontResource(fontName: "SourceSansPro-LightItalic")
    /// Font `SourceSansPro-Light`.
    static let sourceSansProLight = Rswift.FontResource(fontName: "SourceSansPro-Light")
    /// Font `SourceSansPro-Regular`.
    static let sourceSansProRegular = Rswift.FontResource(fontName: "SourceSansPro-Regular")
    /// Font `SourceSansPro-SemiBoldItalic`.
    static let sourceSansProSemiBoldItalic = Rswift.FontResource(fontName: "SourceSansPro-SemiBoldItalic")
    /// Font `SourceSansPro-SemiBold`.
    static let sourceSansProSemiBold = Rswift.FontResource(fontName: "SourceSansPro-SemiBold")
    
    /// `UIFont(name: "Montserrat-Regular", size: ...)`
    static func montserratRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: montserratRegular, size: size)
    }
    
    /// `UIFont(name: "Roboto-Black", size: ...)`
    static func robotoBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlack, size: size)
    }
    
    /// `UIFont(name: "Roboto-BlackItalic", size: ...)`
    static func robotoBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBlackItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Bold", size: ...)`
    static func robotoBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBold, size: size)
    }
    
    /// `UIFont(name: "Roboto-BoldItalic", size: ...)`
    static func robotoBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoBoldItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Italic", size: ...)`
    static func robotoItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Light", size: ...)`
    static func robotoLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLight, size: size)
    }
    
    /// `UIFont(name: "Roboto-LightItalic", size: ...)`
    static func robotoLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoLightItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Medium", size: ...)`
    static func robotoMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMedium, size: size)
    }
    
    /// `UIFont(name: "Roboto-MediumItalic", size: ...)`
    static func robotoMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoMediumItalic, size: size)
    }
    
    /// `UIFont(name: "Roboto-Regular", size: ...)`
    static func robotoRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoRegular, size: size)
    }
    
    /// `UIFont(name: "Roboto-Thin", size: ...)`
    static func robotoThin(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThin, size: size)
    }
    
    /// `UIFont(name: "Roboto-ThinItalic", size: ...)`
    static func robotoThinItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoThinItalic, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Bold", size: ...)`
    static func robotoCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedBold, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-BoldItalic", size: ...)`
    static func robotoCondensedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedBoldItalic, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Italic", size: ...)`
    static func robotoCondensedItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedItalic, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Light", size: ...)`
    static func robotoCondensedLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedLight, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-LightItalic", size: ...)`
    static func robotoCondensedLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedLightItalic, size: size)
    }
    
    /// `UIFont(name: "RobotoCondensed-Regular", size: ...)`
    static func robotoCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: robotoCondensedRegular, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Black", size: ...)`
    static func sourceSansProBlack(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBlack, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-BlackItalic", size: ...)`
    static func sourceSansProBlackItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBlackItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Bold", size: ...)`
    static func sourceSansProBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBold, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-BoldItalic", size: ...)`
    static func sourceSansProBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProBoldItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-ExtraLight", size: ...)`
    static func sourceSansProExtraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProExtraLight, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-ExtraLightItalic", size: ...)`
    static func sourceSansProExtraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProExtraLightItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Italic", size: ...)`
    static func sourceSansProItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Light", size: ...)`
    static func sourceSansProLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProLight, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-LightItalic", size: ...)`
    static func sourceSansProLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProLightItalic, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-Regular", size: ...)`
    static func sourceSansProRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProRegular, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-SemiBold", size: ...)`
    static func sourceSansProSemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProSemiBold, size: size)
    }
    
    /// `UIFont(name: "SourceSansPro-SemiBoldItalic", size: ...)`
    static func sourceSansProSemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: sourceSansProSemiBoldItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.robotoLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-LightItalic' could not be loaded, is 'Roboto-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThinItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-ThinItalic' could not be loaded, is 'Roboto-ThinItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Regular' could not be loaded, is 'SourceSansPro-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Bold' could not be loaded, is 'RobotoCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Regular' could not be loaded, is 'RobotoCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-MediumItalic' could not be loaded, is 'Roboto-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProSemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-SemiBoldItalic' could not be loaded, is 'SourceSansPro-SemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.montserratRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Montserrat-Regular' could not be loaded, is 'Montserrat-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProExtraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-ExtraLightItalic' could not be loaded, is 'SourceSansPro-ExtraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoThin(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Thin' could not be loaded, is 'Roboto-Thin.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Light' could not be loaded, is 'Roboto-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Italic' could not be loaded, is 'SourceSansPro-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-LightItalic' could not be loaded, is 'RobotoCondensed-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-BoldItalic' could not be loaded, is 'RobotoCondensed-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-BoldItalic' could not be loaded, is 'SourceSansPro-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Light' could not be loaded, is 'RobotoCondensed-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Bold' could not be loaded, is 'SourceSansPro-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BlackItalic' could not be loaded, is 'Roboto-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-LightItalic' could not be loaded, is 'SourceSansPro-LightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoCondensedItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'RobotoCondensed-Italic' could not be loaded, is 'RobotoCondensed-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Italic' could not be loaded, is 'Roboto-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProExtraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-ExtraLight' could not be loaded, is 'SourceSansPro-ExtraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProSemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-SemiBold' could not be loaded, is 'SourceSansPro-SemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Medium' could not be loaded, is 'Roboto-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Bold' could not be loaded, is 'Roboto-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Light' could not be loaded, is 'SourceSansPro-Light.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-BoldItalic' could not be loaded, is 'Roboto-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Black' could not be loaded, is 'Roboto-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBlack(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-Black' could not be loaded, is 'SourceSansPro-Black.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.robotoRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'Roboto-Regular' could not be loaded, is 'Roboto-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.sourceSansProBlackItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'SourceSansPro-BlackItalic' could not be loaded, is 'SourceSansPro-BlackItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 0 images.
  struct image {
    /// This `R.image.actions` struct is generated, and contains static references to 5 images.
    struct actions {
      /// Image `Back`.
      static let back = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Back")
      /// Image `Cancel`.
      static let cancel = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Cancel")
      /// Image `Next`.
      static let next = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Next")
      /// Image `SearchOpponents`.
      static let searchOpponents = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/SearchOpponents")
      /// Image `Touchid`.
      static let touchid = Rswift.ImageResource(bundle: R.hostingBundle, name: "Actions/Touchid")
      
      /// `UIImage(named: "Back", bundle: ..., traitCollection: ...)`
      static func back(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.back, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Cancel", bundle: ..., traitCollection: ...)`
      static func cancel(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.cancel, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Next", bundle: ..., traitCollection: ...)`
      static func next(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.next, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "SearchOpponents", bundle: ..., traitCollection: ...)`
      static func searchOpponents(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.searchOpponents, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Touchid", bundle: ..., traitCollection: ...)`
      static func touchid(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.actions.touchid, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.arrows` struct is generated, and contains static references to 2 images.
    struct arrows {
      /// Image `next_arrow`.
      static let next_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrows/next_arrow")
      /// Image `next_inactive_arrow`.
      static let next_inactive_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Arrows/next_inactive_arrow")
      
      /// `UIImage(named: "next_arrow", bundle: ..., traitCollection: ...)`
      static func next_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.arrows.next_arrow, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "next_inactive_arrow", bundle: ..., traitCollection: ...)`
      static func next_inactive_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.arrows.next_inactive_arrow, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.common` struct is generated, and contains static references to 1 images.
    struct common {
      /// Image `Logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Common/Logo")
      
      /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.common.logo, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.decorations` struct is generated, and contains static references to 1 images.
    struct decorations {
      /// Image `EventSportSubstrate`.
      static let eventSportSubstrate = Rswift.ImageResource(bundle: R.hostingBundle, name: "Decorations/EventSportSubstrate")
      
      /// `UIImage(named: "EventSportSubstrate", bundle: ..., traitCollection: ...)`
      static func eventSportSubstrate(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.decorations.eventSportSubstrate, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.icons` struct is generated, and contains static references to 8 images.
    struct icons {
      /// Image `Chekmark`.
      static let chekmark = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/Chekmark")
      /// Image `Clear`.
      static let clear = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/Clear")
      /// Image `Disclosure_arrow`.
      static let disclosure_arrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/Disclosure_arrow")
      /// Image `Notifications`.
      static let notifications = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/Notifications")
      /// Image `Sad`.
      static let sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/Sad")
      /// Image `Search`.
      static let search = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/Search")
      /// Image `start_filled`.
      static let start_filled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/start_filled")
      /// Image `start_unfilled`.
      static let start_unfilled = Rswift.ImageResource(bundle: R.hostingBundle, name: "Icons/start_unfilled")
      
      /// `UIImage(named: "Chekmark", bundle: ..., traitCollection: ...)`
      static func chekmark(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.chekmark, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Clear", bundle: ..., traitCollection: ...)`
      static func clear(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.clear, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Disclosure_arrow", bundle: ..., traitCollection: ...)`
      static func disclosure_arrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.disclosure_arrow, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Notifications", bundle: ..., traitCollection: ...)`
      static func notifications(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.notifications, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Sad", bundle: ..., traitCollection: ...)`
      static func sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.sad, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Search", bundle: ..., traitCollection: ...)`
      static func search(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.search, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "start_filled", bundle: ..., traitCollection: ...)`
      static func start_filled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.start_filled, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "start_unfilled", bundle: ..., traitCollection: ...)`
      static func start_unfilled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.icons.start_unfilled, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.launch` struct is generated, and contains static references to 2 images.
    struct launch {
      /// Image `Background`.
      static let background = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch/Background")
      /// Image `Logo`.
      static let logo = Rswift.ImageResource(bundle: R.hostingBundle, name: "Launch/Logo")
      
      /// `UIImage(named: "Background", bundle: ..., traitCollection: ...)`
      static func background(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.launch.background, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Logo", bundle: ..., traitCollection: ...)`
      static func logo(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.launch.logo, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.placeholders` struct is generated, and contains static references to 2 images.
    struct placeholders {
      /// Image `User`.
      static let user = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholders/User")
      /// Image `Color`.
      static let wager = Rswift.ImageResource(bundle: R.hostingBundle, name: "Placeholders/Color")
      
      /// `UIImage(named: "User", bundle: ..., traitCollection: ...)`
      static func user(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.placeholders.user, compatibleWith: traitCollection)
      }
      
      /// `UIImage(named: "Color", bundle: ..., traitCollection: ...)`
      static func wager(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.placeholders.wager, compatibleWith: traitCollection)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.tabBar` struct is generated, and contains static references to 1 images.
    struct tabBar {
      /// Image `Plus`.
      static let plus = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Plus")
      
      /// `UIImage(named: "Plus", bundle: ..., traitCollection: ...)`
      static func plus(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
        return UIKit.UIImage(resource: R.image.tabBar.plus, compatibleWith: traitCollection)
      }
      
      /// This `R.image.tabBar.friends` struct is generated, and contains static references to 2 images.
      struct friends {
        /// Image `Active`.
        static let active = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Friends/Active")
        /// Image `Inactive`.
        static let inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Friends/Inactive")
        
        /// `UIImage(named: "Active", bundle: ..., traitCollection: ...)`
        static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.friends.active, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "Inactive", bundle: ..., traitCollection: ...)`
        static func inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.friends.inactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.tabBar.profile` struct is generated, and contains static references to 2 images.
      struct profile {
        /// Image `Active`.
        static let active = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Profile/Active")
        /// Image `Inactive`.
        static let inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Profile/Inactive")
        
        /// `UIImage(named: "Active", bundle: ..., traitCollection: ...)`
        static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.profile.active, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "Inactive", bundle: ..., traitCollection: ...)`
        static func inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.profile.inactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.tabBar.wagers` struct is generated, and contains static references to 2 images.
      struct wagers {
        /// Image `Active`.
        static let active = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Colors/Active")
        /// Image `Inactive`.
        static let inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Colors/Inactive")
        
        /// `UIImage(named: "Active", bundle: ..., traitCollection: ...)`
        static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.wagers.active, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "Inactive", bundle: ..., traitCollection: ...)`
        static func inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.wagers.inactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.tabBar.wallet` struct is generated, and contains static references to 2 images.
      struct wallet {
        /// Image `Active`.
        static let active = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Wallet/Active")
        /// Image `Inactive`.
        static let inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "TabBar/Wallet/Inactive")
        
        /// `UIImage(named: "Active", bundle: ..., traitCollection: ...)`
        static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.wallet.active, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "Inactive", bundle: ..., traitCollection: ...)`
        static func inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.tabBar.wallet.inactive, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      fileprivate init() {}
    }
    
    /// This `R.image.views` struct is generated, and contains static references to 0 images.
    struct views {
      /// This `R.image.views.checkbox` struct is generated, and contains static references to 0 images.
      struct checkbox {
        /// This `R.image.views.checkbox.brief` struct is generated, and contains static references to 2 images.
        struct brief {
          /// Image `Active`.
          static let active = Rswift.ImageResource(bundle: R.hostingBundle, name: "Views/Checkbox/Brief/Active")
          /// Image `Inactive`.
          static let inactive = Rswift.ImageResource(bundle: R.hostingBundle, name: "Views/Checkbox/Brief/Inactive")
          
          /// `UIImage(named: "Active", bundle: ..., traitCollection: ...)`
          static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.views.checkbox.brief.active, compatibleWith: traitCollection)
          }
          
          /// `UIImage(named: "Inactive", bundle: ..., traitCollection: ...)`
          static func inactive(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.views.checkbox.brief.inactive, compatibleWith: traitCollection)
          }
          
          fileprivate init() {}
        }
        
        /// This `R.image.views.checkbox.invite` struct is generated, and contains static references to 1 images.
        struct invite {
          /// Image `Active`.
          static let active = Rswift.ImageResource(bundle: R.hostingBundle, name: "Views/Checkbox/Invite/Active")
          
          /// `UIImage(named: "Active", bundle: ..., traitCollection: ...)`
          static func active(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
            return UIKit.UIImage(resource: R.image.views.checkbox.invite.active, compatibleWith: traitCollection)
          }
          
          fileprivate init() {}
        }
        
        fileprivate init() {}
      }
      
      /// This `R.image.views.search` struct is generated, and contains static references to 2 images.
      struct search {
        /// Image `searchBigIcon`.
        static let searchBigIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Views/Search/searchBigIcon")
        /// Image `searchIcon`.
        static let searchIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "Views/Search/searchIcon")
        
        /// `UIImage(named: "searchBigIcon", bundle: ..., traitCollection: ...)`
        static func searchBigIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.views.search.searchBigIcon, compatibleWith: traitCollection)
        }
        
        /// `UIImage(named: "searchIcon", bundle: ..., traitCollection: ...)`
        static func searchIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
          return UIKit.UIImage(resource: R.image.views.search.searchIcon, compatibleWith: traitCollection)
        }
        
        fileprivate init() {}
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 53 nibs.
  struct nib {
    /// Nib `BetOptionView`.
    static let betOptionView = _R.nib._BetOptionView()
    /// Nib `ChangePhotoCell`.
    static let changePhotoCell = _R.nib._ChangePhotoCell()
    /// Nib `DateTimeView`.
    static let dateTimeView = _R.nib._DateTimeView()
    /// Nib `DecimalOddsEditorView`.
    static let decimalOddsEditorView = _R.nib._DecimalOddsEditorView()
    /// Nib `EditCell`.
    static let editCell = _R.nib._EditCell()
    /// Nib `EmptyView`.
    static let emptyView = _R.nib._EmptyView()
    /// Nib `FractionalOddsEditorView`.
    static let fractionalOddsEditorView = _R.nib._FractionalOddsEditorView()
    /// Nib `GameBetView`.
    static let gameBetView = _R.nib._GameBetView()
    /// Nib `GameEventPreviewCell`.
    static let gameEventPreviewCell = _R.nib._GameEventPreviewCell()
    /// Nib `GameSportPreView`.
    static let gameSportPreView = _R.nib._GameSportPreView()
    /// Nib `InactiveColorView`.
    static let inactiveColorView = _R.nib._InactiveColorView()
    /// Nib `InviteFriendCell`.
    static let inviteFriendCell = _R.nib._InviteFriendCell()
    /// Nib `LargeTitleViewController`.
    static let largeTitleViewController = _R.nib._LargeTitleViewController()
    /// Nib `LoadingView`.
    static let loadingView = _R.nib._LoadingView()
    /// Nib `LogoutCell`.
    static let logoutCell = _R.nib._LogoutCell()
    /// Nib `NavigationBarTitleView`.
    static let navigationBarTitleView = _R.nib._NavigationBarTitleView()
    /// Nib `NavigationBarView`.
    static let navigationBarView = _R.nib._NavigationBarView()
    /// Nib `NoContactsView`.
    static let noContactsView = _R.nib._NoContactsView()
    /// Nib `NoFriendsAccessView`.
    static let noFriendsAccessView = _R.nib._NoFriendsAccessView()
    /// Nib `NoSearchResultsView`.
    static let noSearchResultsView = _R.nib._NoSearchResultsView()
    /// Nib `OddsEditorView`.
    static let oddsEditorView = _R.nib._OddsEditorView()
    /// Nib `OddsOpponentCell`.
    static let oddsOpponentCell = _R.nib._OddsOpponentCell()
    /// Nib `OddsTotalTableSectionHeader`.
    static let oddsTotalTableSectionHeader = _R.nib._OddsTotalTableSectionHeader()
    /// Nib `PlayerCell`.
    static let playerCell = _R.nib._PlayerCell()
    /// Nib `ProfileCell`.
    static let profileCell = _R.nib._ProfileCell()
    /// Nib `SearchEventsPlaceholderView`.
    static let searchEventsPlaceholderView = _R.nib._SearchEventsPlaceholderView()
    /// Nib `SegmentedMenuItemView`.
    static let segmentedMenuItemView = _R.nib._SegmentedMenuItemView()
    /// Nib `SelectedOpponentCell`.
    static let selectedOpponentCell = _R.nib._SelectedOpponentCell()
    /// Nib `SelectedOpponentsView`.
    static let selectedOpponentsView = _R.nib._SelectedOpponentsView()
    /// Nib `SettingCell`.
    static let settingCell = _R.nib._SettingCell()
    /// Nib `SettingOptionsInfoHeaderView`.
    static let settingOptionsInfoHeaderView = _R.nib._SettingOptionsInfoHeaderView()
    /// Nib `SettingsOptionCell`.
    static let settingsOptionCell = _R.nib._SettingsOptionCell()
    /// Nib `SportCell`.
    static let sportCell = _R.nib._SportCell()
    /// Nib `SportLogoView`.
    static let sportLogoView = _R.nib._SportLogoView()
    /// Nib `SportsCell`.
    static let sportsCell = _R.nib._SportsCell()
    /// Nib `SuggestedOpponentCell`.
    static let suggestedOpponentCell = _R.nib._SuggestedOpponentCell()
    /// Nib `TabBarItem`.
    static let tabBarItem = _R.nib._TabBarItem()
    /// Nib `TabBar`.
    static let tabBar = _R.nib._TabBar()
    /// Nib `TeamCell`.
    static let teamCell = _R.nib._TeamCell()
    /// Nib `TeamPreviewView`.
    static let teamPreviewView = _R.nib._TeamPreviewView()
    /// Nib `TitleHeader`.
    static let titleHeader = _R.nib._TitleHeader()
    /// Nib `TournamentCell`.
    static let tournamentCell = _R.nib._TournamentCell()
    /// Nib `ColorDetailsActionsCell`.
    static let wagerDetailsActionsCell = _R.nib._ColorDetailsActionsCell()
    /// Nib `ColorDetailsEventCell`.
    static let wagerDetailsEventCell = _R.nib._ColorDetailsEventCell()
    /// Nib `ColorDetailsOpponentCell`.
    static let wagerDetailsOpponentCell = _R.nib._ColorDetailsOpponentCell()
    /// Nib `ColorDetailsOpponentView`.
    static let wagerDetailsOpponentView = _R.nib._ColorDetailsOpponentView()
    /// Nib `ColorDetailsResultCell`.
    static let wagerDetailsResultCell = _R.nib._ColorDetailsResultCell()
    /// Nib `ColorDetailsRevokeStatusCell`.
    static let wagerDetailsRevokeStatusCell = _R.nib._ColorDetailsRevokeStatusCell()
    /// Nib `ColorDetailsStakeOddsCell`.
    static let wagerDetailsStakeOddsCell = _R.nib._ColorDetailsStakeOddsCell()
    /// Nib `ColorDetailsTotalCalculationsCell`.
    static let wagerDetailsTotalCalculationsCell = _R.nib._ColorDetailsTotalCalculationsCell()
    /// Nib `ColorOpponentView`.
    static let wagerOpponentView = _R.nib._ColorOpponentView()
    /// Nib `ColorPreviewCell`.
    static let wagerPreviewCell = _R.nib._ColorPreviewCell()
    /// Nib `ColorTotalCalculationsView`.
    static let wagerTotalCalculationsView = _R.nib._ColorTotalCalculationsView()
    
    /// `UINib(name: "BetOptionView", in: bundle)`
    static func betOptionView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.betOptionView)
    }
    
    /// `UINib(name: "ChangePhotoCell", in: bundle)`
    static func changePhotoCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.changePhotoCell)
    }
    
    /// `UINib(name: "DateTimeView", in: bundle)`
    static func dateTimeView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.dateTimeView)
    }
    
    /// `UINib(name: "DecimalOddsEditorView", in: bundle)`
    static func decimalOddsEditorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.decimalOddsEditorView)
    }
    
    /// `UINib(name: "EditCell", in: bundle)`
    static func editCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.editCell)
    }
    
    /// `UINib(name: "EmptyView", in: bundle)`
    static func emptyView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.emptyView)
    }
    
    /// `UINib(name: "FractionalOddsEditorView", in: bundle)`
    static func fractionalOddsEditorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.fractionalOddsEditorView)
    }
    
    /// `UINib(name: "GameBetView", in: bundle)`
    static func gameBetView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameBetView)
    }
    
    /// `UINib(name: "GameEventPreviewCell", in: bundle)`
    static func gameEventPreviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameEventPreviewCell)
    }
    
    /// `UINib(name: "GameSportPreView", in: bundle)`
    static func gameSportPreView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameSportPreView)
    }
    
    /// `UINib(name: "InactiveColorView", in: bundle)`
    static func inactiveColorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inactiveColorView)
    }
    
    /// `UINib(name: "InviteFriendCell", in: bundle)`
    static func inviteFriendCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.inviteFriendCell)
    }
    
    /// `UINib(name: "LargeTitleViewController", in: bundle)`
    static func largeTitleViewController(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.largeTitleViewController)
    }
    
    /// `UINib(name: "LoadingView", in: bundle)`
    static func loadingView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.loadingView)
    }
    
    /// `UINib(name: "LogoutCell", in: bundle)`
    static func logoutCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.logoutCell)
    }
    
    /// `UINib(name: "NavigationBarTitleView", in: bundle)`
    static func navigationBarTitleView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.navigationBarTitleView)
    }
    
    /// `UINib(name: "NavigationBarView", in: bundle)`
    static func navigationBarView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.navigationBarView)
    }
    
    /// `UINib(name: "NoContactsView", in: bundle)`
    static func noContactsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noContactsView)
    }
    
    /// `UINib(name: "NoFriendsAccessView", in: bundle)`
    static func noFriendsAccessView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noFriendsAccessView)
    }
    
    /// `UINib(name: "NoSearchResultsView", in: bundle)`
    static func noSearchResultsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.noSearchResultsView)
    }
    
    /// `UINib(name: "OddsEditorView", in: bundle)`
    static func oddsEditorView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oddsEditorView)
    }
    
    /// `UINib(name: "OddsOpponentCell", in: bundle)`
    static func oddsOpponentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oddsOpponentCell)
    }
    
    /// `UINib(name: "OddsTotalTableSectionHeader", in: bundle)`
    static func oddsTotalTableSectionHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.oddsTotalTableSectionHeader)
    }
    
    /// `UINib(name: "PlayerCell", in: bundle)`
    static func playerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.playerCell)
    }
    
    /// `UINib(name: "ProfileCell", in: bundle)`
    static func profileCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.profileCell)
    }
    
    /// `UINib(name: "SearchEventsPlaceholderView", in: bundle)`
    static func searchEventsPlaceholderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.searchEventsPlaceholderView)
    }
    
    /// `UINib(name: "SegmentedMenuItemView", in: bundle)`
    static func segmentedMenuItemView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.segmentedMenuItemView)
    }
    
    /// `UINib(name: "SelectedOpponentCell", in: bundle)`
    static func selectedOpponentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectedOpponentCell)
    }
    
    /// `UINib(name: "SelectedOpponentsView", in: bundle)`
    static func selectedOpponentsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.selectedOpponentsView)
    }
    
    /// `UINib(name: "SettingCell", in: bundle)`
    static func settingCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingCell)
    }
    
    /// `UINib(name: "SettingOptionsInfoHeaderView", in: bundle)`
    static func settingOptionsInfoHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingOptionsInfoHeaderView)
    }
    
    /// `UINib(name: "SettingsOptionCell", in: bundle)`
    static func settingsOptionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.settingsOptionCell)
    }
    
    /// `UINib(name: "SportCell", in: bundle)`
    static func sportCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sportCell)
    }
    
    /// `UINib(name: "SportLogoView", in: bundle)`
    static func sportLogoView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sportLogoView)
    }
    
    /// `UINib(name: "SportsCell", in: bundle)`
    static func sportsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.sportsCell)
    }
    
    /// `UINib(name: "SuggestedOpponentCell", in: bundle)`
    static func suggestedOpponentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.suggestedOpponentCell)
    }
    
    /// `UINib(name: "TabBar", in: bundle)`
    static func tabBar(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBar)
    }
    
    /// `UINib(name: "TabBarItem", in: bundle)`
    static func tabBarItem(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tabBarItem)
    }
    
    /// `UINib(name: "TeamCell", in: bundle)`
    static func teamCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamCell)
    }
    
    /// `UINib(name: "TeamPreviewView", in: bundle)`
    static func teamPreviewView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.teamPreviewView)
    }
    
    /// `UINib(name: "TitleHeader", in: bundle)`
    static func titleHeader(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleHeader)
    }
    
    /// `UINib(name: "TournamentCell", in: bundle)`
    static func tournamentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.tournamentCell)
    }
    
    /// `UINib(name: "ColorDetailsActionsCell", in: bundle)`
    static func wagerDetailsActionsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsActionsCell)
    }
    
    /// `UINib(name: "ColorDetailsEventCell", in: bundle)`
    static func wagerDetailsEventCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsEventCell)
    }
    
    /// `UINib(name: "ColorDetailsOpponentCell", in: bundle)`
    static func wagerDetailsOpponentCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsOpponentCell)
    }
    
    /// `UINib(name: "ColorDetailsOpponentView", in: bundle)`
    static func wagerDetailsOpponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsOpponentView)
    }
    
    /// `UINib(name: "ColorDetailsResultCell", in: bundle)`
    static func wagerDetailsResultCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsResultCell)
    }
    
    /// `UINib(name: "ColorDetailsRevokeStatusCell", in: bundle)`
    static func wagerDetailsRevokeStatusCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsRevokeStatusCell)
    }
    
    /// `UINib(name: "ColorDetailsStakeOddsCell", in: bundle)`
    static func wagerDetailsStakeOddsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsStakeOddsCell)
    }
    
    /// `UINib(name: "ColorDetailsTotalCalculationsCell", in: bundle)`
    static func wagerDetailsTotalCalculationsCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerDetailsTotalCalculationsCell)
    }
    
    /// `UINib(name: "ColorOpponentView", in: bundle)`
    static func wagerOpponentView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerOpponentView)
    }
    
    /// `UINib(name: "ColorPreviewCell", in: bundle)`
    static func wagerPreviewCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerPreviewCell)
    }
    
    /// `UINib(name: "ColorTotalCalculationsView", in: bundle)`
    static func wagerTotalCalculationsView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.wagerTotalCalculationsView)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 24 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `ChangePhotoCell`.
    static let changePhotoCell: Rswift.ReuseIdentifier<ChangePhotoCell> = Rswift.ReuseIdentifier(identifier: "ChangePhotoCell")
    /// Reuse identifier `EditCell`.
    static let editCell: Rswift.ReuseIdentifier<EditCell> = Rswift.ReuseIdentifier(identifier: "EditCell")
    /// Reuse identifier `GameEventPreviewCell`.
    static let gameEventPreviewCell: Rswift.ReuseIdentifier<GameEventPreviewCell> = Rswift.ReuseIdentifier(identifier: "GameEventPreviewCell")
    /// Reuse identifier `InviteFriendCell`.
    static let inviteFriendCell: Rswift.ReuseIdentifier<InviteFriendCell> = Rswift.ReuseIdentifier(identifier: "InviteFriendCell")
    /// Reuse identifier `LogoutCell`.
    static let logoutCell: Rswift.ReuseIdentifier<LogoutCell> = Rswift.ReuseIdentifier(identifier: "LogoutCell")
    /// Reuse identifier `OddsOpponentCell`.
    static let oddsOpponentCell: Rswift.ReuseIdentifier<OddsOpponentCell> = Rswift.ReuseIdentifier(identifier: "OddsOpponentCell")
    /// Reuse identifier `PlayerCell`.
    static let playerCell: Rswift.ReuseIdentifier<TeamCell> = Rswift.ReuseIdentifier(identifier: "PlayerCell")
    /// Reuse identifier `ProfileCell`.
    static let profileCell: Rswift.ReuseIdentifier<ProfileCell> = Rswift.ReuseIdentifier(identifier: "ProfileCell")
    /// Reuse identifier `SelectedOpponentCell`.
    static let selectedOpponentCell: Rswift.ReuseIdentifier<SelectedOpponentCell> = Rswift.ReuseIdentifier(identifier: "SelectedOpponentCell")
    /// Reuse identifier `SettingCell`.
    static let settingCell: Rswift.ReuseIdentifier<SettingCell> = Rswift.ReuseIdentifier(identifier: "SettingCell")
    /// Reuse identifier `SettingsOptionCell`.
    static let settingsOptionCell: Rswift.ReuseIdentifier<SettingsOptionCell> = Rswift.ReuseIdentifier(identifier: "SettingsOptionCell")
    /// Reuse identifier `SportCell`.
    static let sportCell: Rswift.ReuseIdentifier<SportCell> = Rswift.ReuseIdentifier(identifier: "SportCell")
    /// Reuse identifier `SportsCell`.
    static let sportsCell: Rswift.ReuseIdentifier<SportsCell> = Rswift.ReuseIdentifier(identifier: "SportsCell")
    /// Reuse identifier `SuggestedOpponentCell`.
    static let suggestedOpponentCell: Rswift.ReuseIdentifier<SuggestedOpponentCell> = Rswift.ReuseIdentifier(identifier: "SuggestedOpponentCell")
    /// Reuse identifier `TeamCell`.
    static let teamCell: Rswift.ReuseIdentifier<TeamCell> = Rswift.ReuseIdentifier(identifier: "TeamCell")
    /// Reuse identifier `TournamentCell`.
    static let tournamentCell: Rswift.ReuseIdentifier<TournamentCell> = Rswift.ReuseIdentifier(identifier: "TournamentCell")
    /// Reuse identifier `ColorDetailsActionsCell`.
    static let wagerDetailsActionsCell: Rswift.ReuseIdentifier<ColorDetailsActionsCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsActionsCell")
    /// Reuse identifier `ColorDetailsEventCell`.
    static let wagerDetailsEventCell: Rswift.ReuseIdentifier<ColorDetailsEventCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsEventCell")
    /// Reuse identifier `ColorDetailsOpponentCell`.
    static let wagerDetailsOpponentCell: Rswift.ReuseIdentifier<ColorDetailsOpponentCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsOpponentCell")
    /// Reuse identifier `ColorDetailsResultCell`.
    static let wagerDetailsResultCell: Rswift.ReuseIdentifier<ColorDetailsResultCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsResultCell")
    /// Reuse identifier `ColorDetailsRevokeStatusCell`.
    static let wagerDetailsRevokeStatusCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsRevokeStatusCell")
    /// Reuse identifier `ColorDetailsStakeOddsCell`.
    static let wagerDetailsStakeOddsCell: Rswift.ReuseIdentifier<ColorDetailsStakeOddsCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsStakeOddsCell")
    /// Reuse identifier `ColorDetailsTotalCalculationsCell`.
    static let wagerDetailsTotalCalculationsCell: Rswift.ReuseIdentifier<ColorDetailsTotalCalculationsCell> = Rswift.ReuseIdentifier(identifier: "ColorDetailsTotalCalculationsCell")
    /// Reuse identifier `ColorPreviewCell`.
    static let wagerPreviewCell: Rswift.ReuseIdentifier<ColorPreviewCell> = Rswift.ReuseIdentifier(identifier: "ColorPreviewCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 0 view controllers.
  struct segue {
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 14 storyboards.
  struct storyboard {
    /// Storyboard `Auth`.
    static let auth = _R.storyboard.auth()
    /// Storyboard `Brief`.
    static let brief = _R.storyboard.brief()
    /// Storyboard `CreateColor`.
    static let createColor = _R.storyboard.createColor()
    /// Storyboard `Events`.
    static let events = _R.storyboard.events()
    /// Storyboard `Favorites`.
    static let favorites = _R.storyboard.favorites()
    /// Storyboard `Friends`.
    static let friends = _R.storyboard.friends()
    /// Storyboard `InviteFriends`.
    static let inviteFriends = _R.storyboard.inviteFriends()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Notifications`.
    static let notifications = _R.storyboard.notifications()
    /// Storyboard `Profile`.
    static let profile = _R.storyboard.profile()
    /// Storyboard `Settings`.
    static let settings = _R.storyboard.settings()
    /// Storyboard `Colors`.
    static let wagers = _R.storyboard.wagers()
    /// Storyboard `Wallet`.
    static let wallet = _R.storyboard.wallet()
    
    /// `UIStoryboard(name: "Auth", bundle: ...)`
    static func auth(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.auth)
    }
    
    /// `UIStoryboard(name: "Brief", bundle: ...)`
    static func brief(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.brief)
    }
    
    /// `UIStoryboard(name: "CreateColor", bundle: ...)`
    static func createColor(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.createColor)
    }
    
    /// `UIStoryboard(name: "Events", bundle: ...)`
    static func events(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.events)
    }
    
    /// `UIStoryboard(name: "Favorites", bundle: ...)`
    static func favorites(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.favorites)
    }
    
    /// `UIStoryboard(name: "Friends", bundle: ...)`
    static func friends(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.friends)
    }
    
    /// `UIStoryboard(name: "InviteFriends", bundle: ...)`
    static func inviteFriends(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.inviteFriends)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Notifications", bundle: ...)`
    static func notifications(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.notifications)
    }
    
    /// `UIStoryboard(name: "Profile", bundle: ...)`
    static func profile(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.profile)
    }
    
    /// `UIStoryboard(name: "Settings", bundle: ...)`
    static func settings(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.settings)
    }
    
    /// `UIStoryboard(name: "Colors", bundle: ...)`
    static func wagers(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wagers)
    }
    
    /// `UIStoryboard(name: "Wallet", bundle: ...)`
    static func wallet(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.wallet)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 5 localization tables.
  struct string {
    /// This `R.string.alertLocalizable` struct is generated, and contains static references to 22 localization keys.
    struct alertLocalizable {
      /// Value: Accept Color
      static let wagerAcceptTitle = Rswift.StringResource(key: "wager.accept.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure want to delete this Color?
      static let wagerDeleteMessage = Rswift.StringResource(key: "wager.delete.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to void this wager?
      static let wagerRevokeMessage = Rswift.StringResource(key: "wager.revoke.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Are you sure you want to withdraw this Color?
      static let wagerWithdrawMessage = Rswift.StringResource(key: "wager.withdraw.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let actionCancel = Rswift.StringResource(key: "action.cancel", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Decline Color
      static let wagerDeclineTitle = Rswift.StringResource(key: "wager.decline.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete Color
      static let wagerDeleteTitle = Rswift.StringResource(key: "wager.delete.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Error
      static let errorTitle = Rswift.StringResource(key: "error.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Feel free to use the comments box below to let %@ why you have declined the wager.
      static let wagerDeclineMessage = Rswift.StringResource(key: "wager.decline.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let actionOk = Rswift.StringResource(key: "action.ok", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password reset
      static let reserPasswordTitle = Rswift.StringResource(key: "reser.password.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Send
      static let actionSend = Rswift.StringResource(key: "action.send", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Validation Error
      static let validationErrorTitle = Rswift.StringResource(key: "validation.error.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Void wager
      static let wagerRevokeAcceptTitle = Rswift.StringResource(key: "wager.revoke.accept.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Void wager
      static let wagerRevokeDeclineTitle = Rswift.StringResource(key: "wager.revoke.decline.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Void wager
      static let wagerRevokeTitle = Rswift.StringResource(key: "wager.revoke.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We've sent you an email with instructions on how to reset your password
      static let resetPasswordText = Rswift.StringResource(key: "reset.password.text", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Withdraw Color
      static let wagerWithdrawTitle = Rswift.StringResource(key: "wager.withdraw.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You agree with the Void request. The wager will be deleted.
      static let wagerRevokeAcceptMessage = Rswift.StringResource(key: "wager.revoke.accept.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are for %@
      static let wagerAcceptMessageWin = Rswift.StringResource(key: "wager.accept.message.win", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You do not agree with the Void request. The wager is still valid.
      static let wagerRevokeDeclineMessage = Rswift.StringResource(key: "wager.revoke.decline.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: e.g. want better odds...
      static let wagerDeclineReasonPlaceholder = Rswift.StringResource(key: "wager.decline.reason.placeholder", tableName: "AlertLocalizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Accept Color
      static func wagerAcceptTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.accept.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure want to delete this Color?
      static func wagerDeleteMessage(_: Void = ()) -> String {
        return NSLocalizedString("wager.delete.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to void this wager?
      static func wagerRevokeMessage(_: Void = ()) -> String {
        return NSLocalizedString("wager.revoke.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Are you sure you want to withdraw this Color?
      static func wagerWithdrawMessage(_: Void = ()) -> String {
        return NSLocalizedString("wager.withdraw.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func actionCancel(_: Void = ()) -> String {
        return NSLocalizedString("action.cancel", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Decline Color
      static func wagerDeclineTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.decline.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete Color
      static func wagerDeleteTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.delete.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Error
      static func errorTitle(_: Void = ()) -> String {
        return NSLocalizedString("error.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Feel free to use the comments box below to let %@ why you have declined the wager.
      static func wagerDeclineMessage(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.decline.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: OK
      static func actionOk(_: Void = ()) -> String {
        return NSLocalizedString("action.ok", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password reset
      static func reserPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("reser.password.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Send
      static func actionSend(_: Void = ()) -> String {
        return NSLocalizedString("action.send", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Validation Error
      static func validationErrorTitle(_: Void = ()) -> String {
        return NSLocalizedString("validation.error.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Void wager
      static func wagerRevokeAcceptTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.revoke.accept.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Void wager
      static func wagerRevokeDeclineTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.revoke.decline.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Void wager
      static func wagerRevokeTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.revoke.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We've sent you an email with instructions on how to reset your password
      static func resetPasswordText(_: Void = ()) -> String {
        return NSLocalizedString("reset.password.text", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Withdraw Color
      static func wagerWithdrawTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.withdraw.title", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You agree with the Void request. The wager will be deleted.
      static func wagerRevokeAcceptMessage(_: Void = ()) -> String {
        return NSLocalizedString("wager.revoke.accept.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You are for %@
      static func wagerAcceptMessageWin(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.accept.message.win", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: You do not agree with the Void request. The wager is still valid.
      static func wagerRevokeDeclineMessage(_: Void = ()) -> String {
        return NSLocalizedString("wager.revoke.decline.message", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: e.g. want better odds...
      static func wagerDeclineReasonPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("wager.decline.reason.placeholder", tableName: "AlertLocalizable", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.empty` struct is generated, and contains static references to 3 localization keys.
    struct empty {
      /// Value: There is no accepted wagers yet
      static let wagersNoAccepted = Rswift.StringResource(key: "wagers.no.accepted", tableName: "Empty", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There is no pending wagers yet
      static let wagersNoPending = Rswift.StringResource(key: "wagers.no.pending", tableName: "Empty", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: There is no settled wagers yet
      static let wagersNoSettled = Rswift.StringResource(key: "wagers.no.settled", tableName: "Empty", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: There is no accepted wagers yet
      static func wagersNoAccepted(_: Void = ()) -> String {
        return NSLocalizedString("wagers.no.accepted", tableName: "Empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There is no pending wagers yet
      static func wagersNoPending(_: Void = ()) -> String {
        return NSLocalizedString("wagers.no.pending", tableName: "Empty", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: There is no settled wagers yet
      static func wagersNoSettled(_: Void = ()) -> String {
        return NSLocalizedString("wagers.no.settled", tableName: "Empty", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.infoPlist` struct is generated, and contains static references to 1 localization keys.
    struct infoPlist {
      /// Value: To use Color please allow access to your phone contacts
      static let nsContactsUsageDescription = Rswift.StringResource(key: "NSContactsUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: To use Color please allow access to your phone contacts
      static func nsContactsUsageDescription(_: Void = ()) -> String {
        return NSLocalizedString("NSContactsUsageDescription", tableName: "InfoPlist", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.localizable` struct is generated, and contains static references to 130 localization keys.
    struct localizable {
      /// Value: %#@count@
      static let choosen = Rswift.StringResource(key: "Choosen", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %#@count@
      static let opponentsFavoriteTeamsSubtitle = Rswift.StringResource(key: "Opponents Favorite Teams Subtitle", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %#@count@
      static let selectedOpponents = Rswift.StringResource(key: "Selected Opponents", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %#@count@
      static let totalOpponents = Rswift.StringResource(key: "Total Opponents", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %#@max@
      static let favoriteTeamsLimit = Rswift.StringResource(key: "Favorite Teams Limit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %#@wagers@
      static let cancelColorTitle = Rswift.StringResource(key: "Cancel Color Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %#@wagers@
      static let createColorTitle = Rswift.StringResource(key: "Create Color Title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ potential LOSS
      static let wagerCalculationsLossTitle = Rswift.StringResource(key: "wager.calculations.loss.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ potential WIN
      static let wagerCalculationsWinTitle = Rswift.StringResource(key: "wager.calculations.win.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: %@ to
      static let wagerResultAuthorFull = Rswift.StringResource(key: "wager.result.author.full", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ACCEPTED
      static let wagersListAcceptedTitle = Rswift.StringResource(key: "wagers.list.accepted.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ALL
      static let friendsAllTitle = Rswift.StringResource(key: "friends.all.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: ALL
      static let wagerCreateOpponentsAllTitle = Rswift.StringResource(key: "wager.create.opponents.all.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Accept Color
      static let wagerDetailsActionsAccept = Rswift.StringResource(key: "wager.details.actions.accept", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Agree void
      static let wagerDetailsActionsAcceptRevoke = Rswift.StringResource(key: "wager.details.actions.acceptRevoke", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: App settings
      static let profileAppSettings = Rswift.StringResource(key: "profile.app.settings", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Both
      static let opponentsSuggestedFavoriteTeamsBoth = Rswift.StringResource(key: "opponents.suggested.favoriteTeams.both", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Building number
      static let editProfileBuildingNumber = Rswift.StringResource(key: "edit.profile.building.number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CHOOSE
      static let opponentsInviteTitle = Rswift.StringResource(key: "opponents.invite.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: CONFIRM PASSWORD
      static let fieldConfirmPasswordTitle = Rswift.StringResource(key: "field.confirm.password.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let actionsCancel = Rswift.StringResource(key: "actions.cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel
      static let cancel = Rswift.StringResource(key: "cancel", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Cancel void
      static let wagerDetailsActionsDeclineRevoke = Rswift.StringResource(key: "wager.details.actions.declineRevoke", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Change photo
      static let editProfileChangePhoto = Rswift.StringResource(key: "edit.profile.change.photo", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Check this out, a new social betting app where we bet against each other. Download it now.
      static let inviteMessage = Rswift.StringResource(key: "invite.message", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: City
      static let editProfileCity = Rswift.StringResource(key: "edit.profile.city", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Close
      static let wagerDetailsActionsClose = Rswift.StringResource(key: "wager.details.actions.close", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Code from SMS
      static let confirmSmsFieldPlaceholder = Rswift.StringResource(key: "confirm.sms.field.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Confirm password
      static let fieldConfirmPassword = Rswift.StringResource(key: "field.confirm.password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Contact Us
      static let profileContactUs = Rswift.StringResource(key: "profile.contact.us", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Country
      static let editProfileCountry = Rswift.StringResource(key: "edit.profile.country", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Create Color
      static let wagerCreateTitle = Rswift.StringResource(key: "wager.create.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Current balance %@
      static let balanceCurrentTitle = Rswift.StringResource(key: "balance.current.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DECLINED
      static let wagerStatusDeclined = Rswift.StringResource(key: "wager.status.declined", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: DRAW
      static let wagerResultDraw = Rswift.StringResource(key: "wager.result.draw", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Date of birth
      static let editProfileDateOfBirth = Rswift.StringResource(key: "edit.profile.date.of.birth", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Decline Color 
      static let wagerDetailsActionsDecline = Rswift.StringResource(key: "wager.details.actions.decline", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Delete Color
      static let wagerDetailsActionsDelete = Rswift.StringResource(key: "wager.details.actions.delete", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Do you have an accounts? Login
      static let signUpLoginTitle = Rswift.StringResource(key: "signUp.login.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Done
      static let actionsDone = Rswift.StringResource(key: "actions.done", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EMAIL
      static let fieldEmailTitle = Rswift.StringResource(key: "field.email.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: EVENTS
      static let eventsAllTitle = Rswift.StringResource(key: "events.all.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit
      static let actionsEdit = Rswift.StringResource(key: "actions.edit", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Profile
      static let editProfileTitle = Rswift.StringResource(key: "edit.profile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Edit Color
      static let wagerDetailsEditTitle = Rswift.StringResource(key: "wager.details.edit.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let editProfileEmail = Rswift.StringResource(key: "edit.profile.email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email
      static let fieldEmail = Rswift.StringResource(key: "field.email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter Email
      static let fieldEmailPlaceholder = Rswift.StringResource(key: "field.email.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter Password
      static let fieldConfirmPasswordPlaceholder = Rswift.StringResource(key: "field.confirm.password.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter Password
      static let fieldPasswordPlaceholder = Rswift.StringResource(key: "field.password.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Enter Phone Number
      static let fieldPhoneNumberPlaceholder = Rswift.StringResource(key: "field.phone.number.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FAVORITES
      static let friendsFavoritesTitle = Rswift.StringResource(key: "friends.favorites.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: FAVORITES
      static let wagerCreateOpponentsFavoritesTitle = Rswift.StringResource(key: "wager.create.opponents.favorites.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let editProfileFirstName = Rswift.StringResource(key: "edit.profile.first.name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: First name
      static let fieldFirstName = Rswift.StringResource(key: "field.first.name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Flat number
      static let editProfileFlatNumber = Rswift.StringResource(key: "edit.profile.flat.number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Forgot your password?
      static let signInForgotPassTitle = Rswift.StringResource(key: "signIn.forgot.pass.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Friends
      static let friendsTitle = Rswift.StringResource(key: "friends.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Haven’t received code?
      static let confirmSmsResendTitle = Rswift.StringResource(key: "confirm.sms.resend.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Hide
      static let fieldHideButtonTitle = Rswift.StringResource(key: "field.hide.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: INVITE
      static let friendsInviteTitle = Rswift.StringResource(key: "friends.invite.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Information
      static let editProfileInforamtion = Rswift.StringResource(key: "edit.profile.inforamtion", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Information
      static let editProfileInformation = Rswift.StringResource(key: "edit.profile.information", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let editProfileLastName = Rswift.StringResource(key: "edit.profile.last.name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Last name
      static let fieldLastName = Rswift.StringResource(key: "field.last.name", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Log Out
      static let profileLogout = Rswift.StringResource(key: "profile.logout", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Login
      static let signUpLoginTitleSubstring = Rswift.StringResource(key: "signUp.login.title.substring", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Interests
      static let profileMyInterests = Rswift.StringResource(key: "profile.my.interests", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: My Colors
      static let wagersListTitle = Rswift.StringResource(key: "wagers.list.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: New User? Register
      static let signInRegisterTitle = Rswift.StringResource(key: "signIn.register.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Next
      static let next = Rswift.StringResource(key: "next", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No Color users in Contacts yet
      static let friendsColorUsersPlaceholder = Rswift.StringResource(key: "friends.wagerUsers.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No favorite Color users in Contacts yet
      static let friendsFavoritesPlaceholder = Rswift.StringResource(key: "friends.favorites.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: No users in Contacts yet
      static let friendsAllPlaceholder = Rswift.StringResource(key: "friends.all.placeholder", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: OK
      static let actionsOk = Rswift.StringResource(key: "actions.ok", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Odds
      static let fieldOdds = Rswift.StringResource(key: "field.odds", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PASSWORD
      static let fieldPasswordTitle = Rswift.StringResource(key: "field.password.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PENDING
      static let wagersListPendingTitle = Rswift.StringResource(key: "wagers.list.pending.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: PHONE NUMBER
      static let fieldPhoneNumberTitle = Rswift.StringResource(key: "field.phone.number.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password
      static let fieldPassword = Rswift.StringResource(key: "field.password", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone
      static let editProfilePhone = Rswift.StringResource(key: "edit.profile.phone", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number
      static let fieldPhoneNumber = Rswift.StringResource(key: "field.phone.number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter your new password
      static let changePassDescriptionText = Rswift.StringResource(key: "change.pass.description.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Please enter your valid email
      static let restorePassDescription = Rswift.StringResource(key: "restore.pass.description", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Postcode
      static let editProfilePostcode = Rswift.StringResource(key: "edit.profile.postcode", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Privacy Policy
      static let profilePrivacyPolicy = Rswift.StringResource(key: "profile.privacy.policy", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Profile
      static let profileTitle = Rswift.StringResource(key: "profile.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: RECEIVED
      static let wagerStatusReceived = Rswift.StringResource(key: "wager.status.received", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Register
      static let signInRegisterSubstring = Rswift.StringResource(key: "signIn.register.substring", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Requried field
      static let editProfileRequiredField = Rswift.StringResource(key: "edit.profile.required.field", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Resend
      static let wagerDetailsActionsResend = Rswift.StringResource(key: "wager.details.actions.resend", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Responsible Gambling
      static let profileResponsibleGambling = Rswift.StringResource(key: "profile.responsible.gambling", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Restore password
      static let restorePassTitle = Rswift.StringResource(key: "restore.pass.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Rules
      static let profileRules = Rswift.StringResource(key: "profile.rules", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SEARCH
      static let eventsSearchTitle = Rswift.StringResource(key: "events.search.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SENT
      static let wagerStatusSent = Rswift.StringResource(key: "wager.status.sent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SETTLED
      static let wagersListSettledTitle = Rswift.StringResource(key: "wagers.list.settled.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SUGGESTED
      static let eventsSuggestedTitle = Rswift.StringResource(key: "events.suggested.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: SUGGESTED
      static let wagerCreateOpponentsSuggesstedTitle = Rswift.StringResource(key: "wager.create.opponents.suggessted.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Show
      static let fieldShowButtonTitle = Rswift.StringResource(key: "field.show.button.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign In
      static let signInTitle = Rswift.StringResource(key: "signIn.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Sign Up
      static let signUpTitle = Rswift.StringResource(key: "signUp.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stake
      static let fieldStake = Rswift.StringResource(key: "field.stake", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Street
      static let editProfileStreet = Rswift.StringResource(key: "edit.profile.street", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Terms & Conditions
      static let profileTermsAndConditions = Rswift.StringResource(key: "profile.terms.and.conditions", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Total
      static let wagerCalculationsVariantTotal = Rswift.StringResource(key: "wager.calculations.variant.total", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: UNVERIFIED
      static let editProfileUnverified = Rswift.StringResource(key: "edit.profile.unverified", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Unknown User
      static let profileUnknownUser = Rswift.StringResource(key: "profile.unknown.user", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: VOID
      static let wagerStatusVoidByOpponent = Rswift.StringResource(key: "wager.status.void.byOpponent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: VOID SENT
      static let wagerStatusVoidByMe = Rswift.StringResource(key: "wager.status.void.byMe", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Void request
      static let wagerDetailsActionsRevoke = Rswift.StringResource(key: "wager.details.actions.revoke", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WAGER USERS
      static let friendsColorUsersTitle = Rswift.StringResource(key: "friends.wagerUsers.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: WIN
      static let wagerResultWin = Rswift.StringResource(key: "wager.result.win", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Color from
      static let wagerStatusReceivedTitle = Rswift.StringResource(key: "wager.status.received.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Color to
      static let wagerStatusSentTitle = Rswift.StringResource(key: "wager.status.sent.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Wallet
      static let walletTitle = Rswift.StringResource(key: "wallet.title", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: We have sent you an SMS with the code
      static let confirmSmsDescriptionText = Rswift.StringResource(key: "confirm.sms.description.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Withdraw Color
      static let wagerDetailsActionsWithdraw = Rswift.StringResource(key: "wager.details.actions.withdraw", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You
      static let wagerResultAuthorMe = Rswift.StringResource(key: "wager.result.author.me", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You are offering these odds to %@ for %@
      static let wagerEditOffer = Rswift.StringResource(key: "wager.edit.offer", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: You can re-request the code through %@
      static let confirmSmsResendConterText = Rswift.StringResource(key: "confirm.sms.resend.conter.text", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your
      static let wagerCalculationsVariantYour = Rswift.StringResource(key: "wager.calculations.variant.your", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your building number
      static let editProfileYourBuildingNumber = Rswift.StringResource(key: "edit.profile.your.building.number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your city
      static let editProfileYourCity = Rswift.StringResource(key: "edit.profile.your.city", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your country
      static let editProfileYourCountry = Rswift.StringResource(key: "edit.profile.your.country", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your email
      static let editProfileYourEmail = Rswift.StringResource(key: "edit.profile.your.email", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your flat number
      static let editProfileYourFlatNumber = Rswift.StringResource(key: "edit.profile.your.flat.number", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your phone
      static let editProfileYourPhone = Rswift.StringResource(key: "edit.profile.your.phone", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: and has offered the following Color on %@
      static let wagerDetailsOfferToYou = Rswift.StringResource(key: "wager.details.offer.to.you", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: and have offered the following Color to %@
      static let wagerDetailsOfferToOpponent = Rswift.StringResource(key: "wager.details.offer.to.opponent", tableName: "Localizable", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: %#@count@
      static func choosen(count value1: Int) -> String {
        return String(format: NSLocalizedString("Choosen", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %#@count@
      static func opponentsFavoriteTeamsSubtitle(_ value1: Int) -> String {
        return String(format: NSLocalizedString("Opponents Favorite Teams Subtitle", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %#@count@
      static func selectedOpponents(count value1: Int) -> String {
        return String(format: NSLocalizedString("Selected Opponents", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %#@count@
      static func totalOpponents(count value1: Int) -> String {
        return String(format: NSLocalizedString("Total Opponents", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %#@max@
      static func favoriteTeamsLimit(max value1: Int) -> String {
        return String(format: NSLocalizedString("Favorite Teams Limit", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %#@wagers@
      static func cancelColorTitle(_ value1: Int) -> String {
        return String(format: NSLocalizedString("Cancel Color Title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %#@wagers@
      static func createColorTitle(_ value1: Int) -> String {
        return String(format: NSLocalizedString("Create Color Title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ potential LOSS
      static func wagerCalculationsLossTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.calculations.loss.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ potential WIN
      static func wagerCalculationsWinTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.calculations.win.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: %@ to
      static func wagerResultAuthorFull(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.result.author.full", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: ACCEPTED
      static func wagersListAcceptedTitle(_: Void = ()) -> String {
        return NSLocalizedString("wagers.list.accepted.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ALL
      static func friendsAllTitle(_: Void = ()) -> String {
        return NSLocalizedString("friends.all.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: ALL
      static func wagerCreateOpponentsAllTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.create.opponents.all.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Accept Color
      static func wagerDetailsActionsAccept(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.accept", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Agree void
      static func wagerDetailsActionsAcceptRevoke(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.acceptRevoke", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: App settings
      static func profileAppSettings(_: Void = ()) -> String {
        return NSLocalizedString("profile.app.settings", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Both
      static func opponentsSuggestedFavoriteTeamsBoth(_: Void = ()) -> String {
        return NSLocalizedString("opponents.suggested.favoriteTeams.both", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Building number
      static func editProfileBuildingNumber(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.building.number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CHOOSE
      static func opponentsInviteTitle(_: Void = ()) -> String {
        return NSLocalizedString("opponents.invite.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: CONFIRM PASSWORD
      static func fieldConfirmPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("field.confirm.password.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func actionsCancel(_: Void = ()) -> String {
        return NSLocalizedString("actions.cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel
      static func cancel(_: Void = ()) -> String {
        return NSLocalizedString("cancel", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Cancel void
      static func wagerDetailsActionsDeclineRevoke(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.declineRevoke", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Change photo
      static func editProfileChangePhoto(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.change.photo", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Check this out, a new social betting app where we bet against each other. Download it now.
      static func inviteMessage(_: Void = ()) -> String {
        return NSLocalizedString("invite.message", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: City
      static func editProfileCity(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.city", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Close
      static func wagerDetailsActionsClose(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.close", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Code from SMS
      static func confirmSmsFieldPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("confirm.sms.field.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Confirm password
      static func fieldConfirmPassword(_: Void = ()) -> String {
        return NSLocalizedString("field.confirm.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Contact Us
      static func profileContactUs(_: Void = ()) -> String {
        return NSLocalizedString("profile.contact.us", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Country
      static func editProfileCountry(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.country", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Create Color
      static func wagerCreateTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.create.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Current balance %@
      static func balanceCurrentTitle(_ value1: String) -> String {
        return String(format: NSLocalizedString("balance.current.title", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: DECLINED
      static func wagerStatusDeclined(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.declined", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: DRAW
      static func wagerResultDraw(_: Void = ()) -> String {
        return NSLocalizedString("wager.result.draw", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Date of birth
      static func editProfileDateOfBirth(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.date.of.birth", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Decline Color 
      static func wagerDetailsActionsDecline(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.decline", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Delete Color
      static func wagerDetailsActionsDelete(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.delete", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Do you have an accounts? Login
      static func signUpLoginTitle(_: Void = ()) -> String {
        return NSLocalizedString("signUp.login.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Done
      static func actionsDone(_: Void = ()) -> String {
        return NSLocalizedString("actions.done", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: EMAIL
      static func fieldEmailTitle(_: Void = ()) -> String {
        return NSLocalizedString("field.email.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: EVENTS
      static func eventsAllTitle(_: Void = ()) -> String {
        return NSLocalizedString("events.all.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit
      static func actionsEdit(_: Void = ()) -> String {
        return NSLocalizedString("actions.edit", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit Profile
      static func editProfileTitle(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Edit Color
      static func wagerDetailsEditTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.edit.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email
      static func editProfileEmail(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email
      static func fieldEmail(_: Void = ()) -> String {
        return NSLocalizedString("field.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter Email
      static func fieldEmailPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("field.email.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter Password
      static func fieldConfirmPasswordPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("field.confirm.password.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter Password
      static func fieldPasswordPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("field.password.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Enter Phone Number
      static func fieldPhoneNumberPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("field.phone.number.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FAVORITES
      static func friendsFavoritesTitle(_: Void = ()) -> String {
        return NSLocalizedString("friends.favorites.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: FAVORITES
      static func wagerCreateOpponentsFavoritesTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.create.opponents.favorites.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First name
      static func editProfileFirstName(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.first.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: First name
      static func fieldFirstName(_: Void = ()) -> String {
        return NSLocalizedString("field.first.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Flat number
      static func editProfileFlatNumber(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.flat.number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Forgot your password?
      static func signInForgotPassTitle(_: Void = ()) -> String {
        return NSLocalizedString("signIn.forgot.pass.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Friends
      static func friendsTitle(_: Void = ()) -> String {
        return NSLocalizedString("friends.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Haven’t received code?
      static func confirmSmsResendTitle(_: Void = ()) -> String {
        return NSLocalizedString("confirm.sms.resend.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Hide
      static func fieldHideButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("field.hide.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: INVITE
      static func friendsInviteTitle(_: Void = ()) -> String {
        return NSLocalizedString("friends.invite.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Information
      static func editProfileInforamtion(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.inforamtion", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Information
      static func editProfileInformation(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.information", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last name
      static func editProfileLastName(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.last.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Last name
      static func fieldLastName(_: Void = ()) -> String {
        return NSLocalizedString("field.last.name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Log Out
      static func profileLogout(_: Void = ()) -> String {
        return NSLocalizedString("profile.logout", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Login
      static func signUpLoginTitleSubstring(_: Void = ()) -> String {
        return NSLocalizedString("signUp.login.title.substring", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Interests
      static func profileMyInterests(_: Void = ()) -> String {
        return NSLocalizedString("profile.my.interests", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: My Colors
      static func wagersListTitle(_: Void = ()) -> String {
        return NSLocalizedString("wagers.list.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: New User? Register
      static func signInRegisterTitle(_: Void = ()) -> String {
        return NSLocalizedString("signIn.register.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Next
      static func next(_: Void = ()) -> String {
        return NSLocalizedString("next", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No Color users in Contacts yet
      static func friendsColorUsersPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("friends.wagerUsers.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No favorite Color users in Contacts yet
      static func friendsFavoritesPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("friends.favorites.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: No users in Contacts yet
      static func friendsAllPlaceholder(_: Void = ()) -> String {
        return NSLocalizedString("friends.all.placeholder", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: OK
      static func actionsOk(_: Void = ()) -> String {
        return NSLocalizedString("actions.ok", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Odds
      static func fieldOdds(_: Void = ()) -> String {
        return NSLocalizedString("field.odds", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PASSWORD
      static func fieldPasswordTitle(_: Void = ()) -> String {
        return NSLocalizedString("field.password.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PENDING
      static func wagersListPendingTitle(_: Void = ()) -> String {
        return NSLocalizedString("wagers.list.pending.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: PHONE NUMBER
      static func fieldPhoneNumberTitle(_: Void = ()) -> String {
        return NSLocalizedString("field.phone.number.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password
      static func fieldPassword(_: Void = ()) -> String {
        return NSLocalizedString("field.password", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Phone
      static func editProfilePhone(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Phone number
      static func fieldPhoneNumber(_: Void = ()) -> String {
        return NSLocalizedString("field.phone.number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter your new password
      static func changePassDescriptionText(_: Void = ()) -> String {
        return NSLocalizedString("change.pass.description.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Please enter your valid email
      static func restorePassDescription(_: Void = ()) -> String {
        return NSLocalizedString("restore.pass.description", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Postcode
      static func editProfilePostcode(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.postcode", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Privacy Policy
      static func profilePrivacyPolicy(_: Void = ()) -> String {
        return NSLocalizedString("profile.privacy.policy", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Profile
      static func profileTitle(_: Void = ()) -> String {
        return NSLocalizedString("profile.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: RECEIVED
      static func wagerStatusReceived(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.received", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Register
      static func signInRegisterSubstring(_: Void = ()) -> String {
        return NSLocalizedString("signIn.register.substring", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Requried field
      static func editProfileRequiredField(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.required.field", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Resend
      static func wagerDetailsActionsResend(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.resend", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Responsible Gambling
      static func profileResponsibleGambling(_: Void = ()) -> String {
        return NSLocalizedString("profile.responsible.gambling", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Restore password
      static func restorePassTitle(_: Void = ()) -> String {
        return NSLocalizedString("restore.pass.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Rules
      static func profileRules(_: Void = ()) -> String {
        return NSLocalizedString("profile.rules", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SEARCH
      static func eventsSearchTitle(_: Void = ()) -> String {
        return NSLocalizedString("events.search.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SENT
      static func wagerStatusSent(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.sent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SETTLED
      static func wagersListSettledTitle(_: Void = ()) -> String {
        return NSLocalizedString("wagers.list.settled.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SUGGESTED
      static func eventsSuggestedTitle(_: Void = ()) -> String {
        return NSLocalizedString("events.suggested.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: SUGGESTED
      static func wagerCreateOpponentsSuggesstedTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.create.opponents.suggessted.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Show
      static func fieldShowButtonTitle(_: Void = ()) -> String {
        return NSLocalizedString("field.show.button.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sign In
      static func signInTitle(_: Void = ()) -> String {
        return NSLocalizedString("signIn.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Sign Up
      static func signUpTitle(_: Void = ()) -> String {
        return NSLocalizedString("signUp.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Stake
      static func fieldStake(_: Void = ()) -> String {
        return NSLocalizedString("field.stake", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Street
      static func editProfileStreet(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.street", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Terms & Conditions
      static func profileTermsAndConditions(_: Void = ()) -> String {
        return NSLocalizedString("profile.terms.and.conditions", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Total
      static func wagerCalculationsVariantTotal(_: Void = ()) -> String {
        return NSLocalizedString("wager.calculations.variant.total", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: UNVERIFIED
      static func editProfileUnverified(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.unverified", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Unknown User
      static func profileUnknownUser(_: Void = ()) -> String {
        return NSLocalizedString("profile.unknown.user", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: VOID
      static func wagerStatusVoidByOpponent(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.void.byOpponent", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: VOID SENT
      static func wagerStatusVoidByMe(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.void.byMe", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Void request
      static func wagerDetailsActionsRevoke(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.revoke", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WAGER USERS
      static func friendsColorUsersTitle(_: Void = ()) -> String {
        return NSLocalizedString("friends.wagerUsers.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: WIN
      static func wagerResultWin(_: Void = ()) -> String {
        return NSLocalizedString("wager.result.win", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Color from
      static func wagerStatusReceivedTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.received.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Color to
      static func wagerStatusSentTitle(_: Void = ()) -> String {
        return NSLocalizedString("wager.status.sent.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Wallet
      static func walletTitle(_: Void = ()) -> String {
        return NSLocalizedString("wallet.title", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: We have sent you an SMS with the code
      static func confirmSmsDescriptionText(_: Void = ()) -> String {
        return NSLocalizedString("confirm.sms.description.text", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Withdraw Color
      static func wagerDetailsActionsWithdraw(_: Void = ()) -> String {
        return NSLocalizedString("wager.details.actions.withdraw", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You
      static func wagerResultAuthorMe(_: Void = ()) -> String {
        return NSLocalizedString("wager.result.author.me", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: You are offering these odds to %@ for %@
      static func wagerEditOffer(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("wager.edit.offer", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: You can re-request the code through %@
      static func confirmSmsResendConterText(_ value1: String) -> String {
        return String(format: NSLocalizedString("confirm.sms.resend.conter.text", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: Your
      static func wagerCalculationsVariantYour(_: Void = ()) -> String {
        return NSLocalizedString("wager.calculations.variant.your", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your building number
      static func editProfileYourBuildingNumber(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.your.building.number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your city
      static func editProfileYourCity(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.your.city", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your country
      static func editProfileYourCountry(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.your.country", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your email
      static func editProfileYourEmail(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.your.email", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your flat number
      static func editProfileYourFlatNumber(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.your.flat.number", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Your phone
      static func editProfileYourPhone(_: Void = ()) -> String {
        return NSLocalizedString("edit.profile.your.phone", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: and has offered the following Color on %@
      static func wagerDetailsOfferToYou(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.details.offer.to.you", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      /// Value: and have offered the following Color to %@
      static func wagerDetailsOfferToOpponent(_ value1: String) -> String {
        return String(format: NSLocalizedString("wager.details.offer.to.opponent", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1)
      }
      
      fileprivate init() {}
    }
    
    /// This `R.string.validations` struct is generated, and contains static references to 14 localization keys.
    struct validations {
      /// Value: Confirm Password isn’t the same as Password
      static let passwordConfirmNotMatching = Rswift.StringResource(key: "password.confirm.not.matching", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email address is not in valid format
      static let emailInvalid = Rswift.StringResource(key: "email.invalid", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Email is so long
      static let emailSoLong = Rswift.StringResource(key: "email.so.long", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Odds must be from %@ to %@
      static let decimaOddsInvalidRange = Rswift.StringResource(key: "decimaOdds.invalid.range", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Odds must be from %@ to %@
      static let fractionalOddsInvalidRange = Rswift.StringResource(key: "fractionalOdds.invalid.range", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password can’t contain spaces only
      static let passwordOnlySpaces = Rswift.StringResource(key: "password.only.spaces", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password field is empty
      static let passwordEmpty = Rswift.StringResource(key: "password.empty", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password should be from 6 to 50 characters
      static let passwordInvalidLength = Rswift.StringResource(key: "password.invalid.length", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Password should contain at least 1 letter and 1 digit
      static let passwordInvalidPattern = Rswift.StringResource(key: "password.invalid.pattern", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Phone number format is invalid
      static let phoneInvalid = Rswift.StringResource(key: "phone.invalid", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Stake must be from %@ to %@
      static let stakeInvalidRange = Rswift.StringResource(key: "stake.invalid.range", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Your email address and phone number is empty or not in correct format.
      static let emailOrPhoneIncorrect = Rswift.StringResource(key: "email.or.phone.incorrect", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: field is empty
      static let fieldIsEmpty = Rswift.StringResource(key: "field.is.empty", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: invalid format - doesn’t meet length validation criteria
      static let invalidFormat = Rswift.StringResource(key: "invalid.format", tableName: "Validations", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Confirm Password isn’t the same as Password
      static func passwordConfirmNotMatching(_: Void = ()) -> String {
        return NSLocalizedString("password.confirm.not.matching", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email address is not in valid format
      static func emailInvalid(_: Void = ()) -> String {
        return NSLocalizedString("email.invalid", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Email is so long
      static func emailSoLong(_: Void = ()) -> String {
        return NSLocalizedString("email.so.long", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Odds must be from %@ to %@
      static func decimaOddsInvalidRange(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("decimaOdds.invalid.range", tableName: "Validations", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Odds must be from %@ to %@
      static func fractionalOddsInvalidRange(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("fractionalOdds.invalid.range", tableName: "Validations", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Password can’t contain spaces only
      static func passwordOnlySpaces(_: Void = ()) -> String {
        return NSLocalizedString("password.only.spaces", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password field is empty
      static func passwordEmpty(_: Void = ()) -> String {
        return NSLocalizedString("password.empty", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password should be from 6 to 50 characters
      static func passwordInvalidLength(_: Void = ()) -> String {
        return NSLocalizedString("password.invalid.length", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Password should contain at least 1 letter and 1 digit
      static func passwordInvalidPattern(_: Void = ()) -> String {
        return NSLocalizedString("password.invalid.pattern", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Phone number format is invalid
      static func phoneInvalid(_: Void = ()) -> String {
        return NSLocalizedString("phone.invalid", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Stake must be from %@ to %@
      static func stakeInvalidRange(_ value1: String, _ value2: String) -> String {
        return String(format: NSLocalizedString("stake.invalid.range", tableName: "Validations", bundle: R.hostingBundle, comment: ""), locale: R.applicationLocale, value1, value2)
      }
      
      /// Value: Your email address and phone number is empty or not in correct format.
      static func emailOrPhoneIncorrect(_: Void = ()) -> String {
        return NSLocalizedString("email.or.phone.incorrect", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: field is empty
      static func fieldIsEmpty(_: Void = ()) -> String {
        return NSLocalizedString("field.is.empty", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: invalid format - doesn’t meet length validation criteria
      static func invalidFormat(_: Void = ()) -> String {
        return NSLocalizedString("invalid.format", tableName: "Validations", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
    try nib.validate()
  }
  
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _OddsOpponentCell.validate()
      try _NoFriendsAccessView.validate()
      try _TabBar.validate()
      try _InviteFriendCell.validate()
      try _SportLogoView.validate()
      try _SettingCell.validate()
      try _SuggestedOpponentCell.validate()
      try _SettingsOptionCell.validate()
      try _PlayerCell.validate()
      try _SearchEventsPlaceholderView.validate()
      try _NoContactsView.validate()
      try _TeamCell.validate()
      try _ProfileCell.validate()
      try _GameEventPreviewCell.validate()
    }
    
    struct _BetOptionView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "BetOptionView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ChangePhotoCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ChangePhotoCell
      
      let bundle = R.hostingBundle
      let identifier = "ChangePhotoCell"
      let name = "ChangePhotoCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ChangePhotoCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ChangePhotoCell
      }
      
      fileprivate init() {}
    }
    
    struct _DateTimeView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DateTimeView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _DecimalOddsEditorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "DecimalOddsEditorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _EditCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = EditCell
      
      let bundle = R.hostingBundle
      let identifier = "EditCell"
      let name = "EditCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> EditCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? EditCell
      }
      
      fileprivate init() {}
    }
    
    struct _EmptyView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "EmptyView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _FractionalOddsEditorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "FractionalOddsEditorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GameBetView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameBetView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _GameEventPreviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = GameEventPreviewCell
      
      let bundle = R.hostingBundle
      let identifier = "GameEventPreviewCell"
      let name = "GameEventPreviewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> GameEventPreviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameEventPreviewCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Decorations/EventSportSubstrate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Decorations/EventSportSubstrate' is used in nib 'GameEventPreviewCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _GameSportPreView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "GameSportPreView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _InactiveColorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "InactiveColorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _InviteFriendCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = InviteFriendCell
      
      let bundle = R.hostingBundle
      let identifier = "InviteFriendCell"
      let name = "InviteFriendCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> InviteFriendCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? InviteFriendCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Views/Checkbox/Invite/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Checkbox/Invite/Active' is used in nib 'InviteFriendCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icons/start_filled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/start_filled' is used in nib 'InviteFriendCell', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Icons/start_unfilled", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/start_unfilled' is used in nib 'InviteFriendCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _LargeTitleViewController: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LargeTitleViewController"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LargeTitleViewController? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LargeTitleViewController
      }
      
      fileprivate init() {}
    }
    
    struct _LoadingView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "LoadingView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _LogoutCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = LogoutCell
      
      let bundle = R.hostingBundle
      let identifier = "LogoutCell"
      let name = "LogoutCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> LogoutCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? LogoutCell
      }
      
      fileprivate init() {}
    }
    
    struct _NavigationBarTitleView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NavigationBarTitleView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NavigationBarView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NavigationBarView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _NoContactsView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoContactsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Icons/Sad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/Sad' is used in nib 'NoContactsView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NoFriendsAccessView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "NoFriendsAccessView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Icons/Sad", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/Sad' is used in nib 'NoFriendsAccessView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _NoSearchResultsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "NoSearchResultsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OddsEditorView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OddsEditorView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _OddsOpponentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = OddsOpponentCell
      
      let bundle = R.hostingBundle
      let identifier = "OddsOpponentCell"
      let name = "OddsOpponentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OddsOpponentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OddsOpponentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Actions/Cancel", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/Cancel' is used in nib 'OddsOpponentCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _OddsTotalTableSectionHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "OddsTotalTableSectionHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> OddsTotalTableSectionHeader? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? OddsTotalTableSectionHeader
      }
      
      fileprivate init() {}
    }
    
    struct _PlayerCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TeamCell
      
      let bundle = R.hostingBundle
      let identifier = "PlayerCell"
      let name = "PlayerCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TeamCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Views/Checkbox/Invite/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Checkbox/Invite/Active' is used in nib 'PlayerCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _ProfileCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ProfileCell
      
      let bundle = R.hostingBundle
      let identifier = "ProfileCell"
      let name = "ProfileCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ProfileCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ProfileCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Icons/Disclosure_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/Disclosure_arrow' is used in nib 'ProfileCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SearchEventsPlaceholderView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SearchEventsPlaceholderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SearchEventsPlaceholderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SearchEventsPlaceholderView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Views/Search/searchBigIcon", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Search/searchBigIcon' is used in nib 'SearchEventsPlaceholderView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SegmentedMenuItemView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SegmentedMenuItemView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SelectedOpponentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SelectedOpponentCell
      
      let bundle = R.hostingBundle
      let identifier = "SelectedOpponentCell"
      let name = "SelectedOpponentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SelectedOpponentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SelectedOpponentCell
      }
      
      fileprivate init() {}
    }
    
    struct _SelectedOpponentsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SelectedOpponentsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _SettingCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingCell"
      let name = "SettingCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Icons/Disclosure_arrow", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/Disclosure_arrow' is used in nib 'SettingCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SettingOptionsInfoHeaderView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "SettingOptionsInfoHeaderView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingOptionsInfoHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingOptionsInfoHeaderView
      }
      
      fileprivate init() {}
    }
    
    struct _SettingsOptionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SettingsOptionCell
      
      let bundle = R.hostingBundle
      let identifier = "SettingsOptionCell"
      let name = "SettingsOptionCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SettingsOptionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SettingsOptionCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Icons/Chekmark", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Icons/Chekmark' is used in nib 'SettingsOptionCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SportCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SportCell
      
      let bundle = R.hostingBundle
      let identifier = "SportCell"
      let name = "SportCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SportCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SportCell
      }
      
      fileprivate init() {}
    }
    
    struct _SportLogoView: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "SportLogoView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Decorations/EventSportSubstrate", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Decorations/EventSportSubstrate' is used in nib 'SportLogoView', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _SportsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = SportsCell
      
      let bundle = R.hostingBundle
      let identifier = "SportsCell"
      let name = "SportsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SportsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SportsCell
      }
      
      fileprivate init() {}
    }
    
    struct _SuggestedOpponentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = SuggestedOpponentCell
      
      let bundle = R.hostingBundle
      let identifier = "SuggestedOpponentCell"
      let name = "SuggestedOpponentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> SuggestedOpponentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? SuggestedOpponentCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Views/Checkbox/Invite/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Checkbox/Invite/Active' is used in nib 'SuggestedOpponentCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TabBar: Rswift.NibResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "TabBar"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "TabBar/Wallet/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Wallet/Active' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Profile/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Profile/Active' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Wallet/Inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Wallet/Inactive' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Colors/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Colors/Active' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Friends/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Friends/Active' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Colors/Inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Colors/Inactive' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Profile/Inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Profile/Inactive' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Plus", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Plus' is used in nib 'TabBar', but couldn't be loaded.") }
        if UIKit.UIImage(named: "TabBar/Friends/Inactive", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'TabBar/Friends/Inactive' is used in nib 'TabBar', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TabBarItem: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TabBarItem"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TeamCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = TeamCell
      
      let bundle = R.hostingBundle
      let identifier = "TeamCell"
      let name = "TeamCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TeamCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TeamCell
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Views/Checkbox/Invite/Active", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Checkbox/Invite/Active' is used in nib 'TeamCell', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct _TeamPreviewView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TeamPreviewView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TitleHeader: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "TitleHeader"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _TournamentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TournamentCell
      
      let bundle = R.hostingBundle
      let identifier = "TournamentCell"
      let name = "TournamentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> TournamentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TournamentCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsActionsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorDetailsActionsCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsActionsCell"
      let name = "ColorDetailsActionsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorDetailsActionsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorDetailsActionsCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsEventCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorDetailsEventCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsEventCell"
      let name = "ColorDetailsEventCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorDetailsEventCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorDetailsEventCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsOpponentCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorDetailsOpponentCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsOpponentCell"
      let name = "ColorDetailsOpponentCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorDetailsOpponentCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorDetailsOpponentCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsOpponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColorDetailsOpponentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsResultCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorDetailsResultCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsResultCell"
      let name = "ColorDetailsResultCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorDetailsResultCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorDetailsResultCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsRevokeStatusCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = UIKit.UITableViewCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsRevokeStatusCell"
      let name = "ColorDetailsRevokeStatusCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UITableViewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UITableViewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsStakeOddsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorDetailsStakeOddsCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsStakeOddsCell"
      let name = "ColorDetailsStakeOddsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorDetailsStakeOddsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorDetailsStakeOddsCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorDetailsTotalCalculationsCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorDetailsTotalCalculationsCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorDetailsTotalCalculationsCell"
      let name = "ColorDetailsTotalCalculationsCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorDetailsTotalCalculationsCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorDetailsTotalCalculationsCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorOpponentView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColorOpponentView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    struct _ColorPreviewCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = ColorPreviewCell
      
      let bundle = R.hostingBundle
      let identifier = "ColorPreviewCell"
      let name = "ColorPreviewCell"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> ColorPreviewCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ColorPreviewCell
      }
      
      fileprivate init() {}
    }
    
    struct _ColorTotalCalculationsView: Rswift.NibResourceType {
      let bundle = R.hostingBundle
      let name = "ColorTotalCalculationsView"
      
      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [NSObject : AnyObject]? = nil) -> UIKit.UIView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? UIKit.UIView
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try main.validate()
      try createColor.validate()
      try wagers.validate()
      try wallet.validate()
      try notifications.validate()
      try events.validate()
      try launchScreen.validate()
      try inviteFriends.validate()
      try brief.validate()
      try settings.validate()
      try favorites.validate()
      try auth.validate()
      try friends.validate()
      try profile.validate()
    }
    
    struct auth: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = SignUpViewController
      
      let bundle = R.hostingBundle
      let changePassViewController = StoryboardViewControllerResource<ChangePassViewController>(identifier: "ChangePassViewController")
      let confirmSMSViewController = StoryboardViewControllerResource<ConfirmSMSViewController>(identifier: "ConfirmSMSViewController")
      let name = "Auth"
      let restorePassViewController = StoryboardViewControllerResource<RestorePassViewController>(identifier: "RestorePassViewController")
      let signInViewController = StoryboardViewControllerResource<SignInViewController>(identifier: "SignInViewController")
      let signUpViewController = StoryboardViewControllerResource<SignUpViewController>(identifier: "SignUpViewController")
      
      func changePassViewController(_: Void = ()) -> ChangePassViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: changePassViewController)
      }
      
      func confirmSMSViewController(_: Void = ()) -> ConfirmSMSViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: confirmSMSViewController)
      }
      
      func restorePassViewController(_: Void = ()) -> RestorePassViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: restorePassViewController)
      }
      
      func signInViewController(_: Void = ()) -> SignInViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signInViewController)
      }
      
      func signUpViewController(_: Void = ()) -> SignUpViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: signUpViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Arrows/next_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrows/next_arrow' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Arrows/next_inactive_arrow") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Arrows/next_inactive_arrow' is used in storyboard 'Auth', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/Logo' is used in storyboard 'Auth', but couldn't be loaded.") }
        if _R.storyboard.auth().signUpViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signUpViewController' could not be loaded from storyboard 'Auth' as 'SignUpViewController'.") }
        if _R.storyboard.auth().confirmSMSViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'confirmSMSViewController' could not be loaded from storyboard 'Auth' as 'ConfirmSMSViewController'.") }
        if _R.storyboard.auth().signInViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'signInViewController' could not be loaded from storyboard 'Auth' as 'SignInViewController'.") }
        if _R.storyboard.auth().restorePassViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'restorePassViewController' could not be loaded from storyboard 'Auth' as 'RestorePassViewController'.") }
        if _R.storyboard.auth().changePassViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'changePassViewController' could not be loaded from storyboard 'Auth' as 'ChangePassViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct brief: Rswift.StoryboardResourceType, Rswift.Validatable {
      let briefViewController = StoryboardViewControllerResource<BriefViewController>(identifier: "BriefViewController")
      let bundle = R.hostingBundle
      let name = "Brief"
      
      func briefViewController(_: Void = ()) -> BriefViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: briefViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Views/Checkbox/Brief/Inactive") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Checkbox/Brief/Inactive' is used in storyboard 'Brief', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Views/Checkbox/Brief/Active") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Views/Checkbox/Brief/Active' is used in storyboard 'Brief', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Common/Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Common/Logo' is used in storyboard 'Brief', but couldn't be loaded.") }
        if _R.storyboard.brief().briefViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'briefViewController' could not be loaded from storyboard 'Brief' as 'BriefViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct createColor: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "CreateColor"
      let wagerBetResultViewController = StoryboardViewControllerResource<ColorBetResultViewController>(identifier: "ColorBetResultViewController")
      let wagerOddsViewController = StoryboardViewControllerResource<ColorOddsViewController>(identifier: "ColorOddsViewController")
      let wagerOpponentsViewController = StoryboardViewControllerResource<ColorOpponentsViewController>(identifier: "ColorOpponentsViewController")
      let wagerSearchOpponentsViewController = StoryboardViewControllerResource<ColorSearchOpponentsViewController>(identifier: "ColorSearchOpponentsViewController")
      let wagerSuggestedOpponentsViewController = StoryboardViewControllerResource<ColorSuggestedOpponentsViewController>(identifier: "ColorSuggestedOpponentsViewController")
      
      func wagerBetResultViewController(_: Void = ()) -> ColorBetResultViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagerBetResultViewController)
      }
      
      func wagerOddsViewController(_: Void = ()) -> ColorOddsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagerOddsViewController)
      }
      
      func wagerOpponentsViewController(_: Void = ()) -> ColorOpponentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagerOpponentsViewController)
      }
      
      func wagerSearchOpponentsViewController(_: Void = ()) -> ColorSearchOpponentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagerSearchOpponentsViewController)
      }
      
      func wagerSuggestedOpponentsViewController(_: Void = ()) -> ColorSuggestedOpponentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagerSuggestedOpponentsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Actions/SearchOpponents") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/SearchOpponents' is used in storyboard 'CreateColor', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Actions/Next") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/Next' is used in storyboard 'CreateColor', but couldn't be loaded.") }
        if _R.storyboard.createColor().wagerSearchOpponentsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagerSearchOpponentsViewController' could not be loaded from storyboard 'CreateColor' as 'ColorSearchOpponentsViewController'.") }
        if _R.storyboard.createColor().wagerBetResultViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagerBetResultViewController' could not be loaded from storyboard 'CreateColor' as 'ColorBetResultViewController'.") }
        if _R.storyboard.createColor().wagerOpponentsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagerOpponentsViewController' could not be loaded from storyboard 'CreateColor' as 'ColorOpponentsViewController'.") }
        if _R.storyboard.createColor().wagerSuggestedOpponentsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagerSuggestedOpponentsViewController' could not be loaded from storyboard 'CreateColor' as 'ColorSuggestedOpponentsViewController'.") }
        if _R.storyboard.createColor().wagerOddsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagerOddsViewController' could not be loaded from storyboard 'CreateColor' as 'ColorOddsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct events: Rswift.StoryboardResourceType, Rswift.Validatable {
      let allEventsViewController = StoryboardViewControllerResource<AllEventsViewController>(identifier: "AllEventsViewController")
      let bundle = R.hostingBundle
      let eventsViewController = StoryboardViewControllerResource<EventsViewController>(identifier: "EventsViewController")
      let name = "Events"
      let searchEventsViewController = StoryboardViewControllerResource<SearchEventsViewController>(identifier: "SearchEventsViewController")
      
      func allEventsViewController(_: Void = ()) -> AllEventsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: allEventsViewController)
      }
      
      func eventsViewController(_: Void = ()) -> EventsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: eventsViewController)
      }
      
      func searchEventsViewController(_: Void = ()) -> SearchEventsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: searchEventsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.events().eventsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'eventsViewController' could not be loaded from storyboard 'Events' as 'EventsViewController'.") }
        if _R.storyboard.events().allEventsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'allEventsViewController' could not be loaded from storyboard 'Events' as 'AllEventsViewController'.") }
        if _R.storyboard.events().searchEventsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'searchEventsViewController' could not be loaded from storyboard 'Events' as 'SearchEventsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct favorites: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let favoritesLeaguesViewController = StoryboardViewControllerResource<FavoritesTournamentsViewController>(identifier: "FavoritesLeaguesViewController")
      let favoritesTeamsViewController = StoryboardViewControllerResource<FavoritesTeamsViewController>(identifier: "FavoritesTeamsViewController")
      let name = "Favorites"
      
      func favoritesLeaguesViewController(_: Void = ()) -> FavoritesTournamentsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritesLeaguesViewController)
      }
      
      func favoritesTeamsViewController(_: Void = ()) -> FavoritesTeamsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: favoritesTeamsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Actions/Next") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/Next' is used in storyboard 'Favorites', but couldn't be loaded.") }
        if _R.storyboard.favorites().favoritesTeamsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritesTeamsViewController' could not be loaded from storyboard 'Favorites' as 'FavoritesTeamsViewController'.") }
        if _R.storyboard.favorites().favoritesLeaguesViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'favoritesLeaguesViewController' could not be loaded from storyboard 'Favorites' as 'FavoritesTournamentsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct friends: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let friendsViewController = StoryboardViewControllerResource<FriendsViewController>(identifier: "FriendsViewController")
      let name = "Friends"
      
      func friendsViewController(_: Void = ()) -> FriendsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: friendsViewController)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "Actions/Next") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Actions/Next' is used in storyboard 'Friends', but couldn't be loaded.") }
        if _R.storyboard.friends().friendsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'friendsViewController' could not be loaded from storyboard 'Friends' as 'FriendsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct inviteFriends: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let inviteFriendsViewController = StoryboardViewControllerResource<InviteFriendsViewController>(identifier: "InviteFriendsViewController")
      let name = "InviteFriends"
      
      func inviteFriendsViewController(_: Void = ()) -> InviteFriendsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: inviteFriendsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.inviteFriends().inviteFriendsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'inviteFriendsViewController' could not be loaded from storyboard 'InviteFriends' as 'InviteFriendsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if UIKit.UIImage(named: "Launch/Background") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch/Background' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if UIKit.UIImage(named: "Launch/Logo") == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'Launch/Logo' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let mainTabBarController = StoryboardViewControllerResource<MainTabBarController>(identifier: "MainTabBarController")
      let name = "Main"
      
      func mainTabBarController(_: Void = ()) -> MainTabBarController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainTabBarController)
      }
      
      static func validate() throws {
        if _R.storyboard.main().mainTabBarController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainTabBarController' could not be loaded from storyboard 'Main' as 'MainTabBarController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct notifications: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Notifications"
      let notificationsListViewController = StoryboardViewControllerResource<NotificationsListViewController>(identifier: "NotificationsListViewController")
      
      func notificationsListViewController(_: Void = ()) -> NotificationsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: notificationsListViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.notifications().notificationsListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'notificationsListViewController' could not be loaded from storyboard 'Notifications' as 'NotificationsListViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct profile: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let editProfileViewController = StoryboardViewControllerResource<EditProfileViewController>(identifier: "EditProfileViewController")
      let name = "Profile"
      let profileViewController = StoryboardViewControllerResource<ProfileViewController>(identifier: "ProfileViewController")
      
      func editProfileViewController(_: Void = ()) -> EditProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: editProfileViewController)
      }
      
      func profileViewController(_: Void = ()) -> ProfileViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: profileViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.profile().profileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'profileViewController' could not be loaded from storyboard 'Profile' as 'ProfileViewController'.") }
        if _R.storyboard.profile().editProfileViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'editProfileViewController' could not be loaded from storyboard 'Profile' as 'EditProfileViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct settings: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Settings"
      let settingsOddsViewController = StoryboardViewControllerResource<SettingsOddsViewController>(identifier: "SettingsOddsViewController")
      
      func settingsOddsViewController(_: Void = ()) -> SettingsOddsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: settingsOddsViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.settings().settingsOddsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'settingsOddsViewController' could not be loaded from storyboard 'Settings' as 'SettingsOddsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct wagers: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Colors"
      let wagerDetailsViewController = StoryboardViewControllerResource<ColorDetailsViewController>(identifier: "ColorDetailsViewController")
      let wagersListViewController = StoryboardViewControllerResource<ColorsListViewController>(identifier: "ColorsListViewController")
      
      func wagerDetailsViewController(_: Void = ()) -> ColorDetailsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagerDetailsViewController)
      }
      
      func wagersListViewController(_: Void = ()) -> ColorsListViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: wagersListViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.wagers().wagersListViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagersListViewController' could not be loaded from storyboard 'Colors' as 'ColorsListViewController'.") }
        if _R.storyboard.wagers().wagerDetailsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'wagerDetailsViewController' could not be loaded from storyboard 'Colors' as 'ColorDetailsViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct wallet: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Wallet"
      let walletViewController = StoryboardViewControllerResource<WalletViewController>(identifier: "WalletViewController")
      
      func walletViewController(_: Void = ()) -> WalletViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: walletViewController)
      }
      
      static func validate() throws {
        if _R.storyboard.wallet().walletViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'walletViewController' could not be loaded from storyboard 'Wallet' as 'WalletViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
